////////////////////////////////////////////////////////////////
//	Reproduce title only if not included in master documentation
////////////////////////////////////////////////////////////////
ifndef::includedInMaster[]
= Examples
endif::[]

[[MelangeK3FSM-Sequential-example]]
== MelangeK3FSM Sequential example

footnote:[asciidoc source of this page:  https://github.com/eclipse/gemoc-studio/tree/master/official_samples/MelangeK3FSM/docs/MelangeK3FSM.asciidoc]




=== Presentation

This example features an executable language using GEMOC Sequential Engine.   

It illustrates the GEMOC animation framework on a Finite State Machine language.   

While similar to the K3FSM example (cf. <<K3FSM-example>>), this example focuses 
on the separation of the base language: *FSM* and the executable sequential language: 
*XSFSM*  by using language polymorphism.     

[[img-MelangeK3FSM_language_concepts_figure]]
.FSM/XSFSM main relations.
image::images/MelangeK3FSM/MelangeK3FSM_language_concepts_figure.png["FSM/XSFSM main relations."]



The tree editor and graphic editor are defined on top of the FSM language. They are considered as if they were pre-existing (Ie. legacy).     

Then, Melange is used to built the XSFSM executable language by inheriting from FSM. The animation layer is also built as an extensions of the graphical editor. 

This allows to use the model polymorphism. Ie. it is possible to edit FSM models and then run them as XSFSM with the appropriate animation extensions. 

More information and the sources of these projects are available online on https://github.com/eclipse/gemoc-studio/tree/master/official_samples/MelangeK3FSM[Github].   

=== Installation

Install the projects of this language:

-         File -> new  -> Examples... -> GEMOC MelangeK3FSM Language example (Sequential)

Create and start an eclipse runtime:

-         Run  ->  Run Configurations... -> Eclipse application > new

Install sample models for the language:

-         File -> new  -> Examples... -> GEMOC model example for MelangeK3FSM  (Sequential)

=== Language structure overview
The following figure presents :

* the base language _fsm_ content;
* how the aspects extends the base classes;
* how the _xsfsm_ language is built by inheriting from the _fsm_ language and using the aspects.


[[img-MelangeK3FSM_language_figure]]
.Language relations, packages and classes view.
image::images/MelangeK3FSM/MelangeK3FSM_language_figure.png["Language relations, packages and classes view."]

		
Please note that for simplification of the diagram, the associations that doesn't represent a containment, have been represented as attribute rather than links.



=== Organization of the code
Main eclipse plugins:

- _org.eclipse.gemoc.example.melangek3fsm.fsm_ contains the definition of the FSM language using the Melange language.
- _org.eclipse.gemoc.example.melangek3fsm.fsm.design_ contains the graphical concrete syntax of FSM, using Sirius. It defines only the layer for edition.
- _org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa_ contains the operational semantics of FSM (ie. the interpreter), using the Kermeta3 language.
- _org.eclipse.gemoc.example.melangek3fsm.fsm.model_ contains the metamodel of FSM, using the Ecore language.
- _org.eclipse.gemoc.example.melangek3fsm.fsm.model.edit_ contains EMF edition support. It is used to customize the various views in Sirius and in the simulator (for example by providing custom icons in the various views)
- _org.eclipse.gemoc.example.melangek3fsm.fsm.model.editor_ contains EMF basic tree editor for FSM models.
- _org.eclipse.gemoc.example.melangek3fsm.xsfsm_ contains the definition of the XSFSM language using the Melange language. Basically, it inherits from FSM language and add the aspects defined in the k3dsa project. 
- _org.eclipse.gemoc.example.melangek3fsm.xsfsm.design_ contains the graphical concrete syntax of XSFSM, using Sirius. It extends fsm.design editor by adding the layers used by the debug/animation.
- _org.eclipse.gemoc.example.melangek3fsm.xsfsm.trace_ contains the trace metamodel automatically generated from the semantics. It is used by the omniscient debugger to support __StepBack__ instruction and to display an interactive timeline of the execution.
- _org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm_ contains the language runtime generated by Melange for XSFSM, ie. a new Ecore model that contains both static elements (from org.eclipse.gemoc.example.melangek3fsm.fsm.model) 
and dynamic features (from org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa).



==== Relation between FSM and XSFSM languages (defined with Melange)

The figure <<img-MelangeK3FSM_language_figure>> presents an overview of the main artefacts in the projects:

- the base language _fsm_ is built by _fsm.melange_ from the _fsm.ecore_. As it use the _legacy_ modifier (ie. it doesn't modifies the ecore definitions) the java classes from the ecore are directly reused as implementation for the fsm language;
- the aspects in _fsm.k3dsa_ extends the base classes;
- the _xsfsm.melange_ file defines the _xsfsm_ language. It inherits from _fsm_ and add the _fsm.k3dsa_ aspects. This will generate the java implementation classes for the resulting xsfsm language.





=== DIY

By following these instructions, you'll be able to reproduce this example from scratch.

NOTE: You may apply some of these steps in a different order. This is only an example of a valid scenario. 


==== Create a legacy language for edition only (FSM)

In the following step, we'll create a language with usual EMF technologies: Ecore + Sirius

It will be considered as a "legacy" language (ie. as if it was developped by a third party).

===== Create the Domain concepts 


Create an Ecore project:

* Menu _File -> New -> Ecore Modeling Project_
** name it	_org.eclipse.gemoc.example.melangek3fsm.fsm.model_

* Edit the ecore file and add the concepts corresponding to the syntaxic domain (ie. reproduce concepts of <<img-K3FSM_syntaxic_domain_figure>>).

[[img-MelangeK3FSM_syntaxic_domain_figure]]
.FSM Syntaxic domain.
image::images/MelangeK3FSM/DIY/MelangeK3FSM_syntaxic_domain.png["FSM Syntaxic domain.", width=640]

* In the _org.eclipse.gemoc.example.k3fsm project_, open the *genmodel* file, 
    ** change the _Base Package_ for the model to `org.eclipse.gemoc.example.melangek3fsm`  (on the package: Fsm -> Fsm -> section _All_)    
    ** Right click on the root element then _Generate model code_.


===== add a tree editor 

* In the _org.eclipse.gemoc.example.melangek3fsm.fsm.model_ project, open the *genmodel* file,     
    ** Right click on the root element then _Generate model code_; _Generate edit code_; _Generate editor code_.

You'll obtain the following projects: _org.eclipse.gemoc.example.melangek3fsm.fsm.model.edit_ and 
_org.eclipse.gemoc.example.melangek3fsm.fsm.model.editor_


===== add a graphical editor 

    * Create a project for the graphical editor: _File -> New -> Viewpoint Specification Project_ .
    	name it: _org.eclipse.gemoc.example.melangek3fsm.fsm.design_
    * Create a representation for edition
    ** Change viewpoint name to "MelangeK3FSMViewPoint", label "K3FSM"
    ** New Diagram representation; set the ID to "FSM", add the k3fsm.ecore to the list of metamodels; set the domain class to the FSM class. In Advanced, set the title expression to "feature:name"
    ** in the Default layer; _New Diagram Element_ -> _Container_; ID = "StateContainer"; Domain class = "State"; Semantic candidate expression = `[self.ownedStates/]`
    *** on the _StateContainer_; _New Style_ -> _Gradient_ 
    *** on the _StateContainer_; _New Contitional style_;  Predicate expression = `[self.eContainer().oclAsType(FSM).initialState = self/]`; create another gradient in it and set a border size to 4.
    ** in the Default layer; _New Diagram Element_ -> _Element Based Edge_; ID = "TranditionEdge"; Domain class = "Transition"; Source mapping = "StateContainer"; source finder expression = `[self.source/]`; target Mapping = "StateContainer"; Target Finder Expression = `[self.target/]`
    *** On _TranditionEdge_/ Edge Style solid, verify the decorators, No decoration for source arrow, and InputArrow for Target Arrow
    *** On _TranditionEdge_/ _Edge Style solid_ / _Center Label Style 8_; Label Expression = `aql:self.getLabel()`
    ** Open the file _org.eclipse.gemoc.example.melangek3fsm.design.Services_; add a method: (use Eclipse quick fix to add the import to 
`import org.eclipse.gemoc.example.k3fsm.Transition;` )


[source,java]
------
public String getLabel(Transition transition) {
	final StringBuilder res = new StringBuilder();

	res.append(transition.getName());
	res.append("\n");	
	res.append("");
	res.append(transition.getInput());
	res.append(" / ");
	res.append(transition.getOutput());	
	return res.toString();
}
------


==== Transform the legacy projects into a GEMOC language

The following actions allow to declare a language for both GEMOC and Melange using the ecore defined previously.

===== Create the Language project (base language: FSM)

* Menu _File -> New -> Project... -> Melange Project_
* -> _Next_ ; Name it _org.eclipse.gemoc.example.melangek3fsm.fsm_ ; -> _Next_
* Check the _Create a plug-in using one of the templates_ box and select _Simple GEMOC Melange Sequential project_ 
* -> _Next_
Fill the wizard with the following:

[options="header",cols="1,1"]
|===
|Label   |Value   
//-------------
|Package name   |_org.eclipse.gemoc.example.melangek3fsm_   
|Language name   |FSM   
|Melange file name   |FSM  
|Ecore file location   | browse to find _org.eclipse.gemoc.example.melangek3fsm.fsm.model/model/fsm.ecore_   
|===

* -> _Finish_

* Edit the file _/org.eclipse.gemoc.example.melangek3fsm.fsm/src/org/eclipse/gemoc/example/melangek3fsm/fsm/FSM.melange_
* add *external* keywork to the language definition 

[source]
----
external language FSM {
	syntax "platform:/resource/org.eclipse.gemoc.example.melangek3fsm.fsm.model/model/fsm.ecore"
}
----

* Right click on the _FSM.melange_ file -> _Melange_ -> _Generate All_


* Right click on the _org.eclipse.gemoc.example.melangek3fsm.fsm_ project -> _Configure_ -> _Add GEMOC Language Project Nature_


* Create a new file  _/org.eclipse.gemoc.example.melangek3fsm.fsm/src/org/eclipse/gemoc/example/melangek3fsm/fsm/FSM.dsl_ *
with the following content:

[source]
----
name = org.eclipse.gemoc.example.melangek3fsm.fsm.FSM          
ecore = platform:/resource/org.eclipse.gemoc.example.melangek3fsm.fsm.model/model/fsm.ecore    
metaprog = org.eclipse.gemoc.metaprog.ecore <1>
----
<1> Indicates that this dsl definition is only providing ecore content but no behavior



==== Create an executable language by extension of the legacy language

===== Create Semantics operations

* Menu _File -> New -> Project... -> K3 Project_
* name it : _org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa_ ; -> _Next_
* Check the _Create a plug-in using one of the templates_ box and select _User Ecore Basic Aspects_ 
* -> _Next_

Fill the wizard with the following:

[options="header",cols="1,1"]
|===
|Label   |Value   
//-------------
|Aspect package prefix   |_org.eclipse.gemoc.example.melangek3fsm_   
|Aspect package sufffix    |.aspects   
|Aspect file name   |FSMAspects  
|Aspect classes suffix   |Aspect 
|Ecore base package name   | org.eclipse.gemoc.example.melangek3fsm
|Ecore file path   | browse to find _org.eclipse.gemoc.example.melangek3fsm.fsm.model/model/fsm.ecore_   
|===

* -> _Finish_

* Open the _/org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa/src/org/eclipse/gemoc/example/melangek3fsm/fsm/aspects/fsmAspects.xtend_ file
and add the following methods in the aspects:

[source,k3,indent=0]
-------------------------------------------
include::../language_workbench/org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa/src/org/eclipse/gemoc/example/melangek3fsm/fsm/k3dsa/fsmAspects.xtend[]
-------------------------------------------


<1> runtime data added via aspect
<2> a method with _@InitializeModel_ annotation in order to use the launch configuration parameters to set up the runtime data when the model execution starts.
<3> a method with _@Main_ annotation that will be used to start the execution.
<4> a method with the _@Step_ annotation that will be observable (ie. the debugger can do a pause when a object instance of this class call this method).
<5>  another method with the _@Step_ annotation that will be observable



===== Create the extended Language project (executable language: XSFSM)

* Menu _File -> New -> Project... -> Melange Project_
* -> _Next_ ; Name it _org.eclipse.gemoc.example.melangek3fsm.xsfsm_ ; -> _Next_
* Check the _Create a plug-in using one of the templates_ box and select _GEMOC Melange based sequential project (extended languages)_ 
* -> _Next_
Fill the wizard with the following:

[options="header",cols="1,1"]
|===
|Label   |Value   
//-------------
|Package name   |_org.eclipse.gemoc.example.melangek3fsm.xsfsm_   
|Language name   |XSFSM   
|Melange file name   |XSFSM  
|Base language name   |FSM  
|Ecore file location   | browse to find _org.eclipse.gemoc.example.melangek3fsm.fsm.model/model/fsm.ecore_  
|K3 DSA Project name | browse to find _org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa_ 
|===

* -> _Finish_

* open the _/org.eclipse.gemoc.example.melangek3fsm.xsfsm/META-INF/MANIFEST.MF_ file, add a dependency to 
the _org.eclipse.gemoc.example.melangek3fsm.fsm_ project.

check the XSFSM.melange file so that it correctly finds the inherited dsl. 

[source,java]
----
package org.eclipse.gemoc.example.melangek3fsm.xsfsm
import-dsl org.inria.gemoc.example.melangek3fsm.fsm.FSM	
language XSFSM inherits org.eclipse.gemoc.example.melangek3fsm.fsm.FSM {
	
	with org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa.StateAspect
	with org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa.StateMachineAspect
	with org.eclipse.gemoc.example.melangek3fsm.fsm.k3dsa.TransitionAspect
}
----


* Right click on the _XSFSM.melange_ file -> _Melange_ -> _Generate All_

This generates a new GEMOC language project: _org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm_ 

 
==== Add Animation and Debug capabilities to the graphical editor

*Debug capabilities* (breakpoint support, basic highlighting, ...)


* Right click on the _org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm_ project -> _GEMOC Language_ 
-> _Create animator project for language_ -> _Extends an existing diagram description_
-> Next -> select _FSM_  (ie. the name of the representation in _org.eclipse.gemoc.example.melangek3fsm.fsm.design_)
-> Next

Fill the wizard with the following:

[options="header",cols="1,1"]
|===
|Label   |Value   
//-------------
|Project name   |_org.eclipse.gemoc.example.melangek3fsm.xsfsm.design_   
|Viewpoint Specification Model name   |org.eclipse.gemoc.example.melangek3fsm.xsfsm.XSFSM.odesign  
|Viewpoint name   |MelangeK3FSM_XSFSMViewpoint  
|Diagram name   |org.eclipse.gemoc.example.melangek3fsm.xsfsm.XSFSM  
|===

 -> Finish
 

*Domain specific animation*

 This is similar to <<K3FSM-example>> (see section Domain specific animation <<K3FSM-example-debug-animation>>).
 
 It has some specificities:
 As the fsm.design is based on fsm.ecore but the executed model is actually based on xsfsm.ecore,
 the typing must use as much as possible the lazy typing of AQL (Sirius query language).
 
 Ie. write `State` instead of `fsm.State`
 
 Additionally, the java service classes should handle both case: edition and running
 
 so the service methods defined in _/org.eclipse.gemoc.example.melangek3fsm.fsm.design/src/org/eclipse/gemoc/example/melangek3fsm/fsm/design/services/FSMServices.java_
  that were dedicated to FSM must be duplicated and adapted to work with XSFSM in
  _/org.eclipse.gemoc.example.melangek3fsm.xsfsm.design/src/org/eclipse/gemoc/example/melangek3fsm/xsfsm/design/services/XFSMServices.java_
 
 
[[MelangeK3FSM-additional-resources]]
=== Additional resources

The following online resources are related to this examples.

* https://github.com/gemoc/ICSA2017Tutorial[Tutorial "Language Engineering with The GEMOC Studio", ICSA'17]: this tutorial uses the same FSM example as this official example. It provides some additional explanations and screenshots. 

[NOTE]
====
 as these resources have been written with a previous version of the GEMOC Studio, 
 their content may need some adaptations to 100% work with the latest version.  
====