/**
 * generated by Xtext 2.24.0
 */
package fr.inria.diverse.minijava_repl.xtext.minijava_repl.impl;

import fr.inria.diverse.minijava_repl.xtext.minijava_repl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Minijava_replFactoryImpl extends EFactoryImpl implements Minijava_replFactory
{
  /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public static Minijava_replFactory init()
  {
		try {
			Minijava_replFactory theMinijava_replFactory = (Minijava_replFactory)EPackage.Registry.INSTANCE.getEFactory(Minijava_replPackage.eNS_URI);
			if (theMinijava_replFactory != null) {
				return theMinijava_replFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new Minijava_replFactoryImpl();
	}

  /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Minijava_replFactoryImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EObject create(EClass eClass)
  {
		switch (eClass.getClassifierID()) {
			case Minijava_replPackage.INTERPRETABLE_INSTRUCTION: return createInterpretableInstruction();
			case Minijava_replPackage.INTERPRETER: return createInterpreter();
			case Minijava_replPackage.TYPE_DECLARATION_INSTRUCTION: return createTypeDeclaration_Instruction();
			case Minijava_replPackage.IMPORT_INSTRUCTION: return createImport_Instruction();
			case Minijava_replPackage.BLOCK_INSTRUCTION: return createBlock_Instruction();
			case Minijava_replPackage.VARIABLE_DECLARATION_INSTRUCTION: return createVariableDeclaration_Instruction();
			case Minijava_replPackage.ASSIGNMENT_INSTRUCTION: return createAssignment_Instruction();
			case Minijava_replPackage.FOR_STATEMENT_INSTRUCTION: return createForStatement_Instruction();
			case Minijava_replPackage.IF_STATEMENT_INSTRUCTION: return createIfStatement_Instruction();
			case Minijava_replPackage.WHILE_STATEMENT_INSTRUCTION: return createWhileStatement_Instruction();
			case Minijava_replPackage.METHOD_INSTRUCTION: return createMethod_Instruction();
			case Minijava_replPackage.EXPRESSION_INSTRUCTION: return createExpression_Instruction();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InterpretableInstruction createInterpretableInstruction()
  {
		InterpretableInstructionImpl interpretableInstruction = new InterpretableInstructionImpl();
		return interpretableInstruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Interpreter createInterpreter()
  {
		InterpreterImpl interpreter = new InterpreterImpl();
		return interpreter;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TypeDeclaration_Instruction createTypeDeclaration_Instruction()
  {
		TypeDeclaration_InstructionImpl typeDeclaration_Instruction = new TypeDeclaration_InstructionImpl();
		return typeDeclaration_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Import_Instruction createImport_Instruction()
  {
		Import_InstructionImpl import_Instruction = new Import_InstructionImpl();
		return import_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Block_Instruction createBlock_Instruction()
  {
		Block_InstructionImpl block_Instruction = new Block_InstructionImpl();
		return block_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public VariableDeclaration_Instruction createVariableDeclaration_Instruction()
  {
		VariableDeclaration_InstructionImpl variableDeclaration_Instruction = new VariableDeclaration_InstructionImpl();
		return variableDeclaration_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Assignment_Instruction createAssignment_Instruction()
  {
		Assignment_InstructionImpl assignment_Instruction = new Assignment_InstructionImpl();
		return assignment_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ForStatement_Instruction createForStatement_Instruction()
  {
		ForStatement_InstructionImpl forStatement_Instruction = new ForStatement_InstructionImpl();
		return forStatement_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public IfStatement_Instruction createIfStatement_Instruction()
  {
		IfStatement_InstructionImpl ifStatement_Instruction = new IfStatement_InstructionImpl();
		return ifStatement_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public WhileStatement_Instruction createWhileStatement_Instruction()
  {
		WhileStatement_InstructionImpl whileStatement_Instruction = new WhileStatement_InstructionImpl();
		return whileStatement_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Method_Instruction createMethod_Instruction()
  {
		Method_InstructionImpl method_Instruction = new Method_InstructionImpl();
		return method_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Expression_Instruction createExpression_Instruction()
  {
		Expression_InstructionImpl expression_Instruction = new Expression_InstructionImpl();
		return expression_Instruction;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Minijava_replPackage getMinijava_replPackage()
  {
		return (Minijava_replPackage)getEPackage();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
  @Deprecated
  public static Minijava_replPackage getPackage()
  {
		return Minijava_replPackage.eINSTANCE;
	}

} //Minijava_replFactoryImpl
