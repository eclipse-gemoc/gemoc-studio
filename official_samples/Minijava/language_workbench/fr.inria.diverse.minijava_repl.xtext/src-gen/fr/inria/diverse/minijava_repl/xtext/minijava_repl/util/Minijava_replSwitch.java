/**
 * generated by Xtext 2.24.0
 */
package fr.inria.diverse.minijava_repl.xtext.minijava_repl.util;

import fr.inria.diverse.minijava_repl.xtext.minijava_repl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Minijava_replPackage
 * @generated
 */
public class Minijava_replSwitch<T> extends Switch<T>
{
  /**
	 * The cached model package
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static Minijava_replPackage modelPackage;

  /**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Minijava_replSwitch()
  {
		if (modelPackage == null) {
			modelPackage = Minijava_replPackage.eINSTANCE;
		}
	}

  /**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
		return ePackage == modelPackage;
	}

  /**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
		switch (classifierID) {
			case Minijava_replPackage.INTERPRETABLE_INSTRUCTION: {
				InterpretableInstruction interpretableInstruction = (InterpretableInstruction)theEObject;
				T result = caseInterpretableInstruction(interpretableInstruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.INTERPRETER: {
				Interpreter interpreter = (Interpreter)theEObject;
				T result = caseInterpreter(interpreter);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.TYPE_DECLARATION_INSTRUCTION: {
				TypeDeclaration_Instruction typeDeclaration_Instruction = (TypeDeclaration_Instruction)theEObject;
				T result = caseTypeDeclaration_Instruction(typeDeclaration_Instruction);
				if (result == null) result = caseInterpretableInstruction(typeDeclaration_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.IMPORT_INSTRUCTION: {
				Import_Instruction import_Instruction = (Import_Instruction)theEObject;
				T result = caseImport_Instruction(import_Instruction);
				if (result == null) result = caseInterpretableInstruction(import_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.BLOCK_INSTRUCTION: {
				Block_Instruction block_Instruction = (Block_Instruction)theEObject;
				T result = caseBlock_Instruction(block_Instruction);
				if (result == null) result = caseInterpretableInstruction(block_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.VARIABLE_DECLARATION_INSTRUCTION: {
				VariableDeclaration_Instruction variableDeclaration_Instruction = (VariableDeclaration_Instruction)theEObject;
				T result = caseVariableDeclaration_Instruction(variableDeclaration_Instruction);
				if (result == null) result = caseInterpretableInstruction(variableDeclaration_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.ASSIGNMENT_INSTRUCTION: {
				Assignment_Instruction assignment_Instruction = (Assignment_Instruction)theEObject;
				T result = caseAssignment_Instruction(assignment_Instruction);
				if (result == null) result = caseInterpretableInstruction(assignment_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.FOR_STATEMENT_INSTRUCTION: {
				ForStatement_Instruction forStatement_Instruction = (ForStatement_Instruction)theEObject;
				T result = caseForStatement_Instruction(forStatement_Instruction);
				if (result == null) result = caseInterpretableInstruction(forStatement_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.IF_STATEMENT_INSTRUCTION: {
				IfStatement_Instruction ifStatement_Instruction = (IfStatement_Instruction)theEObject;
				T result = caseIfStatement_Instruction(ifStatement_Instruction);
				if (result == null) result = caseInterpretableInstruction(ifStatement_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.WHILE_STATEMENT_INSTRUCTION: {
				WhileStatement_Instruction whileStatement_Instruction = (WhileStatement_Instruction)theEObject;
				T result = caseWhileStatement_Instruction(whileStatement_Instruction);
				if (result == null) result = caseInterpretableInstruction(whileStatement_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.METHOD_INSTRUCTION: {
				Method_Instruction method_Instruction = (Method_Instruction)theEObject;
				T result = caseMethod_Instruction(method_Instruction);
				if (result == null) result = caseInterpretableInstruction(method_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Minijava_replPackage.EXPRESSION_INSTRUCTION: {
				Expression_Instruction expression_Instruction = (Expression_Instruction)theEObject;
				T result = caseExpression_Instruction(expression_Instruction);
				if (result == null) result = caseInterpretableInstruction(expression_Instruction);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Interpretable Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Interpretable Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseInterpretableInstruction(InterpretableInstruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Interpreter</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Interpreter</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseInterpreter(Interpreter object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Type Declaration Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Type Declaration Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseTypeDeclaration_Instruction(TypeDeclaration_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Import Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Import Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseImport_Instruction(Import_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Block Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Block Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseBlock_Instruction(Block_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Variable Declaration Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Variable Declaration Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseVariableDeclaration_Instruction(VariableDeclaration_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Assignment Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Assignment Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseAssignment_Instruction(Assignment_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>For Statement Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>For Statement Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseForStatement_Instruction(ForStatement_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>If Statement Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>If Statement Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseIfStatement_Instruction(IfStatement_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>While Statement Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>While Statement Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseWhileStatement_Instruction(WhileStatement_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Method Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Method Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseMethod_Instruction(Method_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>Expression Instruction</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Expression Instruction</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
  public T caseExpression_Instruction(Expression_Instruction object)
  {
		return null;
	}

  /**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
  @Override
  public T defaultCase(EObject object)
  {
		return null;
	}

} //Minijava_replSwitch
