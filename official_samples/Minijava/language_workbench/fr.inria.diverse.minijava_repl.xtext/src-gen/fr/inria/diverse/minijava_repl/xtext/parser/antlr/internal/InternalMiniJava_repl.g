/*
 * generated by Xtext 2.24.0
 */
grammar InternalMiniJava_repl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package fr.inria.diverse.minijava_repl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.minijava_repl.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.minijava_repl.xtext.services.MiniJava_replGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private MiniJava_replGrammarAccess grammarAccess;

    public InternalMiniJava_replParser(TokenStream input, MiniJava_replGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "EntryPoint";
   	}

   	@Override
   	protected MiniJava_replGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEntryPoint
entryRuleEntryPoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryPointRule()); }
	iv_ruleEntryPoint=ruleEntryPoint
	{ $current=$iv_ruleEntryPoint.current; }
	EOF;

// Rule EntryPoint
ruleEntryPoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEntryPointAccess().getInterpretableInstructionParserRuleCall_0());
		}
		this_InterpretableInstruction_0=ruleInterpretableInstruction
		{
			$current = $this_InterpretableInstruction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEntryPointAccess().getInterpreterParserRuleCall_1());
		}
		this_Interpreter_1=ruleInterpreter
		{
			$current = $this_Interpreter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterpretableInstruction
entryRuleInterpretableInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterpretableInstructionRule()); }
	iv_ruleInterpretableInstruction=ruleInterpretableInstruction
	{ $current=$iv_ruleInterpretableInstruction.current; }
	EOF;

// Rule InterpretableInstruction
ruleInterpretableInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getTypeDeclaration_InstructionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalTypeDeclarationParserRuleCall_0_1_0());
					}
					lv_original_1_0=ruleTypeDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_1_0,
							"org.tetrabox.minijava.xtext.MiniJava.TypeDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getImport_InstructionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalImportParserRuleCall_1_1_0());
					}
					lv_original_3_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getBlock_InstructionAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalBlockParserRuleCall_2_1_0());
					}
					lv_original_5_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_5_0,
							"org.tetrabox.minijava.xtext.MiniJava.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getVariableDeclaration_InstructionAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalVariableDeclarationParserRuleCall_3_1_0());
					}
					lv_original_7_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_7_0,
							"org.tetrabox.minijava.xtext.MiniJava.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getAssignment_InstructionAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalAssignmentParserRuleCall_4_1_0());
					}
					lv_original_9_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_9_0,
							"org.tetrabox.minijava.xtext.MiniJava.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getForStatement_InstructionAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalForStatementParserRuleCall_5_1_0());
					}
					lv_original_11_0=ruleForStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_11_0,
							"org.tetrabox.minijava.xtext.MiniJava.ForStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getIfStatement_InstructionAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalIfStatementParserRuleCall_6_1_0());
					}
					lv_original_13_0=ruleIfStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_13_0,
							"org.tetrabox.minijava.xtext.MiniJava.IfStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getWhileStatement_InstructionAction_7_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalWhileStatementParserRuleCall_7_1_0());
					}
					lv_original_15_0=ruleWhileStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_15_0,
							"org.tetrabox.minijava.xtext.MiniJava.WhileStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getMethod_InstructionAction_8_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalMethodParserRuleCall_8_1_0());
					}
					lv_original_17_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_17_0,
							"org.tetrabox.minijava.xtext.MiniJava.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getInterpretableInstructionAccess().getExpression_InstructionAction_9_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInterpretableInstructionAccess().getOriginalExpressionParserRuleCall_9_1_0());
					}
					lv_original_19_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterpretableInstructionRule());
						}
						set(
							$current,
							"original",
							lv_original_19_0,
							"org.tetrabox.minijava.xtext.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInterpreter
entryRuleInterpreter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterpreterRule()); }
	iv_ruleInterpreter=ruleInterpreter
	{ $current=$iv_ruleInterpreter.current; }
	EOF;

// Rule Interpreter
ruleInterpreter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			$current = forceCreateModelElement(
				grammarAccess.getInterpreterAccess().getInterpreterAction(),
				$current);
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getClazzParserRuleCall_0());
		}
		this_Clazz_0=ruleClazz
		{
			$current = $this_Clazz_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getInterfaceParserRuleCall_1());
		}
		this_Interface_1=ruleInterface
		{
			$current = $this_Interface_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClazz
entryRuleClazz returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClazzRule()); }
	iv_ruleClazz=ruleClazz
	{ $current=$iv_ruleClazz.current; }
	EOF;

// Rule Clazz
ruleClazz returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClazzAccess().getAccessLevelAccessLevelEnumRuleCall_0_0());
				}
				lv_accessLevel_0_0=ruleAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClazzRule());
					}
					set(
						$current,
						"accessLevel",
						lv_accessLevel_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.AccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_isabstract_1_0='abstract'
				{
					newLeafNode(lv_isabstract_1_0, grammarAccess.getClazzAccess().getIsabstractAbstractKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClazzRule());
					}
					setWithLastConsumed($current, "isabstract", lv_isabstract_1_0 != null, "abstract");
				}
			)
		)?
		otherlv_2='class'
		{
			newLeafNode(otherlv_2, grammarAccess.getClazzAccess().getClassKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getClazzAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClazzRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4='extends'
			{
				newLeafNode(otherlv_4, grammarAccess.getClazzAccess().getExtendsKeyword_4_0());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClazzRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClazzAccess().getSuperClassClazzCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='implements'
			{
				newLeafNode(otherlv_6, grammarAccess.getClazzAccess().getImplementsKeyword_5_0());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClazzRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClazzAccess().getImplementzInterfaceCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getClazzAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getClazzRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getClazzAccess().getImplementzInterfaceCrossReference_5_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_10='{'
		{
			newLeafNode(otherlv_10, grammarAccess.getClazzAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClazzAccess().getMembersMemberParserRuleCall_7_0());
				}
				lv_members_11_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClazzRule());
					}
					add(
						$current,
						"members",
						lv_members_11_0,
						"org.tetrabox.minijava.xtext.MiniJava.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getClazzAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	iv_ruleInterface=ruleInterface
	{ $current=$iv_ruleInterface.current; }
	EOF;

// Rule Interface
ruleInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceAccess().getAccessLevelAccessLevelEnumRuleCall_0_0());
				}
				lv_accessLevel_0_0=ruleAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceRule());
					}
					set(
						$current,
						"accessLevel",
						lv_accessLevel_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.AccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='interface'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getInterfaceKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInterfaceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInterfaceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getInterfaceAccess().getImplementzInterfaceCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getInterfaceAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInterfaceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getInterfaceAccess().getImplementzInterfaceCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceAccess().getMembersMemberParserRuleCall_5_0());
				}
				lv_members_8_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceRule());
					}
					add(
						$current,
						"members",
						lv_members_8_0,
						"org.tetrabox.minijava.xtext.MiniJava.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMemberAccess().getFieldParserRuleCall_0());
		}
		this_Field_0=ruleField
		{
			$current = $this_Field_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMemberAccess().getMethodParserRuleCall_1());
		}
		this_Method_1=ruleMethod
		{
			$current = $this_Method_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getAccessAccessLevelEnumRuleCall_0_0());
				}
				lv_access_0_0=ruleAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"access",
						lv_access_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.AccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_isabstract_1_0='abstract'
				{
					newLeafNode(lv_isabstract_1_0, grammarAccess.getMethodAccess().getIsabstractAbstractKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed($current, "isabstract", lv_isabstract_1_0 != null, "abstract");
				}
			)
		)?
		(
			(
				lv_isstatic_2_0='static'
				{
					newLeafNode(lv_isstatic_2_0, grammarAccess.getMethodAccess().getIsstaticStaticKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed($current, "isstatic", lv_isstatic_2_0 != null, "static");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getTypeRefTypeRefParserRuleCall_3_0());
				}
				lv_typeRef_3_0=ruleTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_3_0,
						"org.tetrabox.minijava.xtext.MiniJava.TypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_6_0_0());
					}
					lv_params_6_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"params",
							lv_params_6_0,
							"org.tetrabox.minijava.xtext.MiniJava.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_6_1_1_0());
						}
						lv_params_8_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"params",
								lv_params_8_0,
								"org.tetrabox.minijava.xtext.MiniJava.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getBodyBlockParserRuleCall_8_0_0());
					}
					lv_body_10_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						set(
							$current,
							"body",
							lv_body_10_0,
							"org.tetrabox.minijava.xtext.MiniJava.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getSemicolonKeyword_8_1());
			}
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeRefTypeRefParserRuleCall_0_0());
				}
				lv_typeRef_0_0=ruleTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.TypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getAccessAccessLevelEnumRuleCall_0_0());
				}
				lv_access_0_0=ruleAccessLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"access",
						lv_access_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.AccessLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getTypeRefTypeRefParserRuleCall_1_0());
				}
				lv_typeRef_1_0=ruleTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.TypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getDefaultValueExpressionParserRuleCall_3_1_0());
					}
					lv_defaultValue_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_4_0,
							"org.tetrabox.minijava.xtext.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"org.tetrabox.minijava.xtext.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_0());
			}
			this_Return_0=ruleReturn
			{
				$current = $this_Return_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		(
			(
				(ruleAssignment)=>
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1_0());
				}
				this_Assignment_2=ruleAssignment
				{
					$current = $this_Assignment_2.current;
					afterParserOrEnumRuleCall();
				}
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2());
		}
		this_IfStatement_4=ruleIfStatement
		{
			$current = $this_IfStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3());
		}
		this_WhileStatement_5=ruleWhileStatement
		{
			$current = $this_WhileStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4());
		}
		this_ForStatement_6=ruleForStatement
		{
			$current = $this_ForStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_5_0());
			}
			this_PrintStatement_7=rulePrintStatement
			{
				$current = $this_PrintStatement_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getSemicolonKeyword_5_1());
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_6());
		}
		this_Block_9=ruleBlock
		{
			$current = $this_Block_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getSelectionExpressionParserRuleCall_7_0());
			}
			this_SelectionExpression_10=ruleSelectionExpression
			{
				$current = $this_SelectionExpression_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getSemicolonKeyword_7_1());
			}
		)
	)
;

// Entry rule entryRulePrintStatement
entryRulePrintStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintStatementRule()); }
	iv_rulePrintStatement=rulePrintStatement
	{ $current=$iv_rulePrintStatement.current; }
	EOF;

// Rule PrintStatement
rulePrintStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='System'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintStatementAccess().getSystemKeyword_0());
		}
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintStatementAccess().getFullStopKeyword_1());
		}
		otherlv_2='out'
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintStatementAccess().getOutKeyword_2());
		}
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getPrintStatementAccess().getFullStopKeyword_3());
		}
		otherlv_4='println'
		{
			newLeafNode(otherlv_4, grammarAccess.getPrintStatementAccess().getPrintlnKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getPrintStatementAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintStatementAccess().getExpressionExpressionParserRuleCall_6_0());
				}
				lv_expression_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getPrintStatementAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenBlockBlockParserRuleCall_4_0());
				}
				lv_thenBlock_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"thenBlock",
						lv_thenBlock_4_0,
						"org.tetrabox.minijava.xtext.MiniJava.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_5_1_0());
					}
					lv_elseBlock_6_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_6_0,
							"org.tetrabox.minijava.xtext.MiniJava.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.tetrabox.minijava.xtext.MiniJava.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getDeclarationAssignmentParserRuleCall_2_0());
				}
				lv_declaration_2_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"declaration",
						lv_declaration_2_0,
						"org.tetrabox.minijava.xtext.MiniJava.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getConditionExpressionParserRuleCall_4_0());
				}
				lv_condition_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_4_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getProgressionAssignmentParserRuleCall_6_0());
				}
				lv_progression_6_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"progression",
						lv_progression_6_0,
						"org.tetrabox.minijava.xtext.MiniJava.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getBlockBlockParserRuleCall_8_0());
				}
				lv_block_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_8_0,
						"org.tetrabox.minijava.xtext.MiniJava.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	iv_ruleTypeRef=ruleTypeRef
	{ $current=$iv_ruleTypeRef.current; }
	EOF;

// Rule TypeRef
ruleTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypeRefAccess().getSingleTypeRefParserRuleCall_0());
		}
		this_SingleTypeRef_0=ruleSingleTypeRef
		{
			$current = $this_SingleTypeRef_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTypeRefAccess().getArrayTypeRefTypeRefAction_1_0(),
						$current);
				}
			)
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getLeftSquareBracketKeyword_1_1());
			}
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeRefAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleSingleTypeRef
entryRuleSingleTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleTypeRefRule()); }
	iv_ruleSingleTypeRef=ruleSingleTypeRef
	{ $current=$iv_ruleSingleTypeRef.current; }
	EOF;

// Rule SingleTypeRef
ruleSingleTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleTypeRefAccess().getClassRefParserRuleCall_0());
		}
		this_ClassRef_0=ruleClassRef
		{
			$current = $this_ClassRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSingleTypeRefAccess().getIntegerTypeRefAction_1_0(),
						$current);
				}
			)
			otherlv_2='int'
			{
				newLeafNode(otherlv_2, grammarAccess.getSingleTypeRefAccess().getIntKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSingleTypeRefAccess().getBooleanTypeRefAction_2_0(),
						$current);
				}
			)
			otherlv_4='boolean'
			{
				newLeafNode(otherlv_4, grammarAccess.getSingleTypeRefAccess().getBooleanKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSingleTypeRefAccess().getStringTypeRefAction_3_0(),
						$current);
				}
			)
			otherlv_6='String'
			{
				newLeafNode(otherlv_6, grammarAccess.getSingleTypeRefAccess().getStringKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSingleTypeRefAccess().getVoidTypeRefAction_4_0(),
						$current);
				}
			)
			otherlv_8='void'
			{
				newLeafNode(otherlv_8, grammarAccess.getSingleTypeRefAccess().getVoidKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleClassRef
entryRuleClassRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRefRule()); }
	iv_ruleClassRef=ruleClassRef
	{ $current=$iv_ruleClassRef.current; }
	EOF;

// Rule ClassRef
ruleClassRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getClassRefRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getClassRefAccess().getReferencedClassTypeDeclarationCrossReference_0());
			}
			ruleQualifiedName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTypedDeclaration
entryRuleTypedDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedDeclarationRule()); }
	iv_ruleTypedDeclaration=ruleTypedDeclaration
	{ $current=$iv_ruleTypedDeclaration.current; }
	EOF;

// Rule TypedDeclaration
ruleTypedDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypedDeclarationAccess().getSymbolParserRuleCall_0());
		}
		this_Symbol_0=ruleSymbol
		{
			$current = $this_Symbol_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTypedDeclarationAccess().getMemberParserRuleCall_1());
		}
		this_Member_1=ruleMember
		{
			$current = $this_Member_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSymbol
entryRuleSymbol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRule()); }
	iv_ruleSymbol=ruleSymbol
	{ $current=$iv_ruleSymbol.current; }
	EOF;

// Rule Symbol
ruleSymbol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleParameter)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSymbolAccess().getParameterParserRuleCall_0());
			}
			this_Parameter_0=ruleParameter
			{
				$current = $this_Parameter_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSymbolAccess().getVariableDeclarationParserRuleCall_1());
		}
		this_VariableDeclaration_1=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeRefTypeRefParserRuleCall_0_0());
				}
				lv_typeRef_0_0=ruleTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.TypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAssigneeAssigneeParserRuleCall_0_0());
				}
				lv_assignee_0_0=ruleAssignee
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"assignee",
						lv_assignee_0_0,
						"org.tetrabox.minijava.xtext.MiniJava.Assignee");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.tetrabox.minijava.xtext.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignee
entryRuleAssignee returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssigneeRule()); }
	iv_ruleAssignee=ruleAssignee
	{ $current=$iv_ruleAssignee.current; }
	EOF;

// Rule Assignee
ruleAssignee returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleArrayAccess)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAssigneeAccess().getArrayAccessParserRuleCall_0());
			}
			this_ArrayAccess_0=ruleArrayAccess
			{
				$current = $this_ArrayAccess_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssigneeAccess().getVariableDeclarationParserRuleCall_1());
		}
		this_VariableDeclaration_1=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='=='
					{
						newLeafNode(otherlv_2, grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityAccess().getInequalityLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='!='
					{
						newLeafNode(otherlv_4, grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.tetrabox.minijava.xtext.MiniJava.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getModuloParserRuleCall_0());
		}
		this_Modulo_0=ruleModulo
		{
			$current = $this_Modulo_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getSuperiorOrEqualLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='>='
					{
						newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getInferiorOrEqualLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='<='
					{
						newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getSuperiorLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='>'
					{
						newLeafNode(otherlv_6, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getInferiorLeftAction_1_0_3_0(),
								$current);
						}
					)
					otherlv_8='<'
					{
						newLeafNode(otherlv_8, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_3_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightModuloParserRuleCall_1_1_0());
					}
					lv_right_9_0=ruleModulo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_9_0,
							"org.tetrabox.minijava.xtext.MiniJava.Modulo");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModulo
entryRuleModulo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuloRule()); }
	iv_ruleModulo=ruleModulo
	{ $current=$iv_ruleModulo.current; }
	EOF;

// Rule Modulo
ruleModulo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModuloAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModuloAccess().getModuloLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='%'
			{
				newLeafNode(otherlv_2, grammarAccess.getModuloAccess().getPercentSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModuloAccess().getRightPlusOrMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuloRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.tetrabox.minijava.xtext.MiniJava.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getArrayAccessParserRuleCall_0());
		}
		this_ArrayAccess_0=ruleArrayAccess
		{
			$current = $this_ArrayAccess_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getMultiplicationLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulOrDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getDivisionLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulOrDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getRightArrayAccessParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleArrayAccess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.tetrabox.minijava.xtext.MiniJava.ArrayAccess");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArrayAccess
entryRuleArrayAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayAccessRule()); }
	iv_ruleArrayAccess=ruleArrayAccess
	{ $current=$iv_ruleArrayAccess.current; }
	EOF;

// Rule ArrayAccess
ruleArrayAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArrayAccessAccess().getArrayLengthParserRuleCall_0());
		}
		this_ArrayLength_0=ruleArrayLength
		{
			$current = $this_ArrayLength_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getArrayAccessAccess().getArrayAccessObjectAction_1_0(),
						$current);
				}
			)
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayAccessAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayAccessAccess().getIndexExpressionParserRuleCall_1_2_0());
					}
					lv_index_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayAccessRule());
						}
						set(
							$current,
							"index",
							lv_index_3_0,
							"org.tetrabox.minijava.xtext.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getArrayAccessAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleArrayLength
entryRuleArrayLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_ruleArrayLength=ruleArrayLength
	{ $current=$iv_ruleArrayLength.current; }
	EOF;

// Rule ArrayLength
ruleArrayLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArrayLengthAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getArrayLengthAccess().getArrayLengthArrayAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayLengthAccess().getFullStopKeyword_1_1());
			}
			otherlv_3='length'
			{
				newLeafNode(otherlv_3, grammarAccess.getArrayLengthAccess().getLengthKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			(
				('!')=>
				otherlv_4='!'
				{
					newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.tetrabox.minijava.xtext.MiniJava.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNegAction_2_0(),
						$current);
				}
			)
			(
				('-')=>
				otherlv_7='-'
				{
					newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getHyphenMinusKeyword_2_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0());
					}
					lv_expression_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"org.tetrabox.minijava.xtext.MiniJava.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getSelectionExpressionParserRuleCall_3());
		}
		this_SelectionExpression_9=ruleSelectionExpression
		{
			$current = $this_SelectionExpression_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelectionExpression
entryRuleSelectionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionExpressionRule()); }
	iv_ruleSelectionExpression=ruleSelectionExpression
	{ $current=$iv_ruleSelectionExpression.current; }
	EOF;

// Rule SelectionExpression
ruleSelectionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSelectionExpressionAccess().getTerminalExpressionParserRuleCall_0());
		}
		this_TerminalExpression_0=ruleTerminalExpression
		{
			$current = $this_TerminalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSelectionExpressionAccess().getFieldAccessReceiverAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='.'
				{
					newLeafNode(otherlv_2, grammarAccess.getSelectionExpressionAccess().getFullStopKeyword_1_0_1());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSelectionExpressionRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getSelectionExpressionAccess().getFieldFieldCrossReference_1_0_2_0());
						}
					)
				)
			)
			    |
			(
				(
					{
						/* */
					}
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSelectionExpressionAccess().getMethodCallReceiverAction_1_1_0(),
							$current);
					}
				)
				otherlv_5='.'
				{
					newLeafNode(otherlv_5, grammarAccess.getSelectionExpressionAccess().getFullStopKeyword_1_1_1());
				}
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSelectionExpressionRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getSelectionExpressionAccess().getMethodMethodCrossReference_1_1_2_0());
						}
					)
				)
				otherlv_7='('
				{
					newLeafNode(otherlv_7, grammarAccess.getSelectionExpressionAccess().getLeftParenthesisKeyword_1_1_3());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getSelectionExpressionAccess().getArgsExpressionParserRuleCall_1_1_4_0_0());
							}
							lv_args_8_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSelectionExpressionRule());
								}
								add(
									$current,
									"args",
									lv_args_8_0,
									"org.tetrabox.minijava.xtext.MiniJava.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_9=','
						{
							newLeafNode(otherlv_9, grammarAccess.getSelectionExpressionAccess().getCommaKeyword_1_1_4_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSelectionExpressionAccess().getArgsExpressionParserRuleCall_1_1_4_1_1_0());
								}
								lv_args_10_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSelectionExpressionRule());
									}
									add(
										$current,
										"args",
										lv_args_10_0,
										"org.tetrabox.minijava.xtext.MiniJava.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_11=')'
				{
					newLeafNode(otherlv_11, grammarAccess.getSelectionExpressionAccess().getRightParenthesisKeyword_1_1_5());
				}
			)
		)*
	)
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getNativeExpressionAction_0_0(),
						$current);
				}
			)
			otherlv_1='\'\'\''
			{
				newLeafNode(otherlv_1, grammarAccess.getTerminalExpressionAccess().getApostropheApostropheApostropheKeyword_0_1());
			}
			(
				(
					lv_value_2_0=RULE_STRING
					{
						newLeafNode(lv_value_2_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_3='\'\'\''
			{
				newLeafNode(otherlv_3, grammarAccess.getTerminalExpressionAccess().getApostropheApostropheApostropheKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_STRING
					{
						newLeafNode(lv_value_5_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getIntConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_INT
					{
						newLeafNode(lv_value_7_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getBoolConstantAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_9_1='true'
						{
							newLeafNode(lv_value_9_1, grammarAccess.getTerminalExpressionAccess().getValueTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_9_1, null);
						}
						    |
						lv_value_9_2='false'
						{
							newLeafNode(lv_value_9_2, grammarAccess.getTerminalExpressionAccess().getValueFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_9_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getThisAction_4_0(),
						$current);
				}
			)
			otherlv_11='this'
			{
				newLeafNode(otherlv_11, grammarAccess.getTerminalExpressionAccess().getThisKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getSuperAction_5_0(),
						$current);
				}
			)
			otherlv_13='super'
			{
				newLeafNode(otherlv_13, grammarAccess.getTerminalExpressionAccess().getSuperKeyword_5_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getNullAction_6_0(),
						$current);
				}
			)
			otherlv_15='null'
			{
				newLeafNode(otherlv_15, grammarAccess.getTerminalExpressionAccess().getNullKeyword_6_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getNewObjectAction_7_0(),
						$current);
				}
			)
			otherlv_17='new'
			{
				newLeafNode(otherlv_17, grammarAccess.getTerminalExpressionAccess().getNewKeyword_7_1());
			}
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
					}
					otherlv_18=RULE_ID
					{
						newLeafNode(otherlv_18, grammarAccess.getTerminalExpressionAccess().getTypeClazzCrossReference_7_2_0());
					}
				)
			)
			(
				('(')=>
				otherlv_19='('
				{
					newLeafNode(otherlv_19, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_7_3());
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTerminalExpressionAccess().getArgsExpressionParserRuleCall_7_4_0_0());
						}
						lv_args_20_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
							}
							add(
								$current,
								"args",
								lv_args_20_0,
								"org.tetrabox.minijava.xtext.MiniJava.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_21=','
					{
						newLeafNode(otherlv_21, grammarAccess.getTerminalExpressionAccess().getCommaKeyword_7_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTerminalExpressionAccess().getArgsExpressionParserRuleCall_7_4_1_1_0());
							}
							lv_args_22_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
								}
								add(
									$current,
									"args",
									lv_args_22_0,
									"org.tetrabox.minijava.xtext.MiniJava.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_23=')'
			{
				newLeafNode(otherlv_23, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_7_5());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getNewArrayAction_8_0(),
						$current);
				}
			)
			otherlv_25='new'
			{
				newLeafNode(otherlv_25, grammarAccess.getTerminalExpressionAccess().getNewKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalExpressionAccess().getTypeTypeRefParserRuleCall_8_2_0());
					}
					lv_type_26_0=ruleTypeRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_26_0,
							"org.tetrabox.minijava.xtext.MiniJava.TypeRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				('[')=>
				otherlv_27='['
				{
					newLeafNode(otherlv_27, grammarAccess.getTerminalExpressionAccess().getLeftSquareBracketKeyword_8_3());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalExpressionAccess().getSizeExpressionParserRuleCall_8_4_0());
					}
					lv_size_28_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
						}
						set(
							$current,
							"size",
							lv_size_28_0,
							"org.tetrabox.minijava.xtext.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_29=']'
			{
				newLeafNode(otherlv_29, grammarAccess.getTerminalExpressionAccess().getRightSquareBracketKeyword_8_5());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalExpressionAccess().getSymbolRefAction_9_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
					}
					otherlv_31=RULE_ID
					{
						newLeafNode(otherlv_31, grammarAccess.getTerminalExpressionAccess().getSymbolSymbolCrossReference_9_1_0());
					}
				)
			)
		)
	)
;

// Rule AccessLevel
ruleAccessLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='private'
			{
				$current = grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAccessLevelAccess().getPRIVATEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='protected'
			{
				$current = grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAccessLevelAccess().getPROTECTEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='public'
			{
				$current = grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAccessLevelAccess().getPUBLICEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
