/**
 * generated by Xtext 2.24.0
 */
package fr.inria.diverse.minijava_repl.xtext.minijava_repl.util;

import fr.inria.diverse.minijava_repl.xtext.minijava_repl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Minijava_replPackage
 * @generated
 */
public class Minijava_replAdapterFactory extends AdapterFactoryImpl
{
  /**
	 * The cached model package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static Minijava_replPackage modelPackage;

  /**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Minijava_replAdapterFactory()
  {
		if (modelPackage == null) {
			modelPackage = Minijava_replPackage.eINSTANCE;
		}
	}

  /**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object object)
  {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

  /**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Minijava_replSwitch<Adapter> modelSwitch =
    new Minijava_replSwitch<Adapter>() {
			@Override
			public Adapter caseInterpretableInstruction(InterpretableInstruction object) {
				return createInterpretableInstructionAdapter();
			}
			@Override
			public Adapter caseInterpreter(Interpreter object) {
				return createInterpreterAdapter();
			}
			@Override
			public Adapter caseTypeDeclaration_Instruction(TypeDeclaration_Instruction object) {
				return createTypeDeclaration_InstructionAdapter();
			}
			@Override
			public Adapter caseImport_Instruction(Import_Instruction object) {
				return createImport_InstructionAdapter();
			}
			@Override
			public Adapter caseBlock_Instruction(Block_Instruction object) {
				return createBlock_InstructionAdapter();
			}
			@Override
			public Adapter caseVariableDeclaration_Instruction(VariableDeclaration_Instruction object) {
				return createVariableDeclaration_InstructionAdapter();
			}
			@Override
			public Adapter caseAssignment_Instruction(Assignment_Instruction object) {
				return createAssignment_InstructionAdapter();
			}
			@Override
			public Adapter caseForStatement_Instruction(ForStatement_Instruction object) {
				return createForStatement_InstructionAdapter();
			}
			@Override
			public Adapter caseIfStatement_Instruction(IfStatement_Instruction object) {
				return createIfStatement_InstructionAdapter();
			}
			@Override
			public Adapter caseWhileStatement_Instruction(WhileStatement_Instruction object) {
				return createWhileStatement_InstructionAdapter();
			}
			@Override
			public Adapter caseMethod_Instruction(Method_Instruction object) {
				return createMethod_InstructionAdapter();
			}
			@Override
			public Adapter caseExpression_Instruction(Expression_Instruction object) {
				return createExpression_InstructionAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

  /**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  @Override
  public Adapter createAdapter(Notifier target)
  {
		return modelSwitch.doSwitch((EObject)target);
	}


  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.InterpretableInstruction <em>Interpretable Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.InterpretableInstruction
	 * @generated
	 */
  public Adapter createInterpretableInstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Interpreter <em>Interpreter</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Interpreter
	 * @generated
	 */
  public Adapter createInterpreterAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.TypeDeclaration_Instruction <em>Type Declaration Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.TypeDeclaration_Instruction
	 * @generated
	 */
  public Adapter createTypeDeclaration_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Import_Instruction <em>Import Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Import_Instruction
	 * @generated
	 */
  public Adapter createImport_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Block_Instruction <em>Block Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Block_Instruction
	 * @generated
	 */
  public Adapter createBlock_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.VariableDeclaration_Instruction <em>Variable Declaration Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.VariableDeclaration_Instruction
	 * @generated
	 */
  public Adapter createVariableDeclaration_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Assignment_Instruction <em>Assignment Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Assignment_Instruction
	 * @generated
	 */
  public Adapter createAssignment_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.ForStatement_Instruction <em>For Statement Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.ForStatement_Instruction
	 * @generated
	 */
  public Adapter createForStatement_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.IfStatement_Instruction <em>If Statement Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.IfStatement_Instruction
	 * @generated
	 */
  public Adapter createIfStatement_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.WhileStatement_Instruction <em>While Statement Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.WhileStatement_Instruction
	 * @generated
	 */
  public Adapter createWhileStatement_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Method_Instruction <em>Method Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Method_Instruction
	 * @generated
	 */
  public Adapter createMethod_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link fr.inria.diverse.minijava_repl.xtext.minijava_repl.Expression_Instruction <em>Expression Instruction</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Expression_Instruction
	 * @generated
	 */
  public Adapter createExpression_InstructionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
  public Adapter createEObjectAdapter()
  {
		return null;
	}

} //Minijava_replAdapterFactory
