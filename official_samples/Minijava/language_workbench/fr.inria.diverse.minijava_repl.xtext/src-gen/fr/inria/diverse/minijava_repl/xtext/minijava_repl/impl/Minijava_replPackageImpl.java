/**
 * generated by Xtext 2.24.0
 */
package fr.inria.diverse.minijava_repl.xtext.minijava_repl.impl;

import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Assignment_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Block_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Expression_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.ForStatement_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.IfStatement_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Import_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.InterpretableInstruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Interpreter;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Method_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Minijava_replFactory;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.Minijava_replPackage;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.TypeDeclaration_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.VariableDeclaration_Instruction;
import fr.inria.diverse.minijava_repl.xtext.minijava_repl.WhileStatement_Instruction;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.tetrabox.minijava.xtext.miniJava.MiniJavaPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Minijava_replPackageImpl extends EPackageImpl implements Minijava_replPackage
{
  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass interpretableInstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass interpreterEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass typeDeclaration_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass import_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass block_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass variableDeclaration_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass assignment_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass forStatement_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass ifStatement_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass whileStatement_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass method_InstructionEClass = null;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private EClass expression_InstructionEClass = null;

  /**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see org.eclipse.emf.ecore.EPackage.Registry
	 * @see fr.inria.diverse.minijava_repl.xtext.minijava_repl.Minijava_replPackage#eNS_URI
	 * @see #init()
	 * @generated
	 */
  private Minijava_replPackageImpl()
  {
		super(eNS_URI, Minijava_replFactory.eINSTANCE);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private static boolean isInited = false;

  /**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 *
	 * <p>This method is used to initialize {@link Minijava_replPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
  public static Minijava_replPackage init()
  {
		if (isInited) return (Minijava_replPackage)EPackage.Registry.INSTANCE.getEPackage(Minijava_replPackage.eNS_URI);

		// Obtain or create and register package
		Object registeredMinijava_replPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
		Minijava_replPackageImpl theMinijava_replPackage = registeredMinijava_replPackage instanceof Minijava_replPackageImpl ? (Minijava_replPackageImpl)registeredMinijava_replPackage : new Minijava_replPackageImpl();

		isInited = true;

		// Initialize simple dependencies
		MiniJavaPackage.eINSTANCE.eClass();

		// Create package meta-data objects
		theMinijava_replPackage.createPackageContents();

		// Initialize created meta-data
		theMinijava_replPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theMinijava_replPackage.freeze();

		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(Minijava_replPackage.eNS_URI, theMinijava_replPackage);
		return theMinijava_replPackage;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getInterpretableInstruction()
  {
		return interpretableInstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EReference getInterpretableInstruction_Previous() {
		return (EReference)interpretableInstructionEClass.getEStructuralFeatures().get(0);
	}

		/**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getInterpreter()
  {
		return interpreterEClass;
	}

  /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EReference getInterpreter_Instruction() {
		return (EReference)interpreterEClass.getEStructuralFeatures().get(0);
	}

		/**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getTypeDeclaration_Instruction()
  {
		return typeDeclaration_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getTypeDeclaration_Instruction_Original()
  {
		return (EReference)typeDeclaration_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getImport_Instruction()
  {
		return import_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getImport_Instruction_Original()
  {
		return (EReference)import_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getBlock_Instruction()
  {
		return block_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getBlock_Instruction_Original()
  {
		return (EReference)block_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getVariableDeclaration_Instruction()
  {
		return variableDeclaration_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getVariableDeclaration_Instruction_Original()
  {
		return (EReference)variableDeclaration_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getAssignment_Instruction()
  {
		return assignment_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getAssignment_Instruction_Original()
  {
		return (EReference)assignment_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getForStatement_Instruction()
  {
		return forStatement_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getForStatement_Instruction_Original()
  {
		return (EReference)forStatement_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getIfStatement_Instruction()
  {
		return ifStatement_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getIfStatement_Instruction_Original()
  {
		return (EReference)ifStatement_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getWhileStatement_Instruction()
  {
		return whileStatement_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getWhileStatement_Instruction_Original()
  {
		return (EReference)whileStatement_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getMethod_Instruction()
  {
		return method_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getMethod_Instruction_Original()
  {
		return (EReference)method_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EClass getExpression_Instruction()
  {
		return expression_InstructionEClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EReference getExpression_Instruction_Original()
  {
		return (EReference)expression_InstructionEClass.getEStructuralFeatures().get(0);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Minijava_replFactory getMinijava_replFactory()
  {
		return (Minijava_replFactory)getEFactoryInstance();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private boolean isCreated = false;

  /**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void createPackageContents()
  {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		interpretableInstructionEClass = createEClass(INTERPRETABLE_INSTRUCTION);
		createEReference(interpretableInstructionEClass, INTERPRETABLE_INSTRUCTION__PREVIOUS);

		interpreterEClass = createEClass(INTERPRETER);
		createEReference(interpreterEClass, INTERPRETER__INSTRUCTION);

		typeDeclaration_InstructionEClass = createEClass(TYPE_DECLARATION_INSTRUCTION);
		createEReference(typeDeclaration_InstructionEClass, TYPE_DECLARATION_INSTRUCTION__ORIGINAL);

		import_InstructionEClass = createEClass(IMPORT_INSTRUCTION);
		createEReference(import_InstructionEClass, IMPORT_INSTRUCTION__ORIGINAL);

		block_InstructionEClass = createEClass(BLOCK_INSTRUCTION);
		createEReference(block_InstructionEClass, BLOCK_INSTRUCTION__ORIGINAL);

		variableDeclaration_InstructionEClass = createEClass(VARIABLE_DECLARATION_INSTRUCTION);
		createEReference(variableDeclaration_InstructionEClass, VARIABLE_DECLARATION_INSTRUCTION__ORIGINAL);

		assignment_InstructionEClass = createEClass(ASSIGNMENT_INSTRUCTION);
		createEReference(assignment_InstructionEClass, ASSIGNMENT_INSTRUCTION__ORIGINAL);

		forStatement_InstructionEClass = createEClass(FOR_STATEMENT_INSTRUCTION);
		createEReference(forStatement_InstructionEClass, FOR_STATEMENT_INSTRUCTION__ORIGINAL);

		ifStatement_InstructionEClass = createEClass(IF_STATEMENT_INSTRUCTION);
		createEReference(ifStatement_InstructionEClass, IF_STATEMENT_INSTRUCTION__ORIGINAL);

		whileStatement_InstructionEClass = createEClass(WHILE_STATEMENT_INSTRUCTION);
		createEReference(whileStatement_InstructionEClass, WHILE_STATEMENT_INSTRUCTION__ORIGINAL);

		method_InstructionEClass = createEClass(METHOD_INSTRUCTION);
		createEReference(method_InstructionEClass, METHOD_INSTRUCTION__ORIGINAL);

		expression_InstructionEClass = createEClass(EXPRESSION_INSTRUCTION);
		createEReference(expression_InstructionEClass, EXPRESSION_INSTRUCTION__ORIGINAL);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  private boolean isInitialized = false;

  /**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void initializePackageContents()
  {
		if (isInitialized) return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Obtain other dependent packages
		MiniJavaPackage theMiniJavaPackage = (MiniJavaPackage)EPackage.Registry.INSTANCE.getEPackage(MiniJavaPackage.eNS_URI);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes
		typeDeclaration_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		import_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		block_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		variableDeclaration_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		assignment_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		forStatement_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		ifStatement_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		whileStatement_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		method_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());
		expression_InstructionEClass.getESuperTypes().add(this.getInterpretableInstruction());

		// Initialize classes and features; add operations and parameters
		initEClass(interpretableInstructionEClass, InterpretableInstruction.class, "InterpretableInstruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getInterpretableInstruction_Previous(), this.getInterpretableInstruction(), null, "previous", null, 0, 1, InterpretableInstruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(interpreterEClass, Interpreter.class, "Interpreter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getInterpreter_Instruction(), this.getInterpretableInstruction(), null, "instruction", null, 0, 1, Interpreter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(typeDeclaration_InstructionEClass, TypeDeclaration_Instruction.class, "TypeDeclaration_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getTypeDeclaration_Instruction_Original(), theMiniJavaPackage.getTypeDeclaration(), null, "original", null, 0, 1, TypeDeclaration_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(import_InstructionEClass, Import_Instruction.class, "Import_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getImport_Instruction_Original(), theMiniJavaPackage.getImport(), null, "original", null, 0, 1, Import_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(block_InstructionEClass, Block_Instruction.class, "Block_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getBlock_Instruction_Original(), theMiniJavaPackage.getBlock(), null, "original", null, 0, 1, Block_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(variableDeclaration_InstructionEClass, VariableDeclaration_Instruction.class, "VariableDeclaration_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getVariableDeclaration_Instruction_Original(), theMiniJavaPackage.getVariableDeclaration(), null, "original", null, 0, 1, VariableDeclaration_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(assignment_InstructionEClass, Assignment_Instruction.class, "Assignment_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAssignment_Instruction_Original(), theMiniJavaPackage.getAssignment(), null, "original", null, 0, 1, Assignment_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(forStatement_InstructionEClass, ForStatement_Instruction.class, "ForStatement_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getForStatement_Instruction_Original(), theMiniJavaPackage.getForStatement(), null, "original", null, 0, 1, ForStatement_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(ifStatement_InstructionEClass, IfStatement_Instruction.class, "IfStatement_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getIfStatement_Instruction_Original(), theMiniJavaPackage.getIfStatement(), null, "original", null, 0, 1, IfStatement_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(whileStatement_InstructionEClass, WhileStatement_Instruction.class, "WhileStatement_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getWhileStatement_Instruction_Original(), theMiniJavaPackage.getWhileStatement(), null, "original", null, 0, 1, WhileStatement_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(method_InstructionEClass, Method_Instruction.class, "Method_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMethod_Instruction_Original(), theMiniJavaPackage.getMethod(), null, "original", null, 0, 1, Method_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(expression_InstructionEClass, Expression_Instruction.class, "Expression_Instruction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getExpression_Instruction_Original(), theMiniJavaPackage.getExpression(), null, "original", null, 0, 1, Expression_Instruction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		// Create resource
		createResource(eNS_URI);
	}

} //Minijava_replPackageImpl
