/*
 * generated by Xtext 2.24.0
 */
package fr.inria.diverse.minijava_repl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.tetrabox.minijava.xtext.services.MiniJavaGrammarAccess;

@Singleton
public class MiniJava_replGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntryPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.minijava_repl.xtext.MiniJava_repl.EntryPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterpretableInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterpreterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntryPoint ecore::EObject:
		//	InterpretableInstruction | Interpreter;
		@Override public ParserRule getRule() { return rule; }
		
		//InterpretableInstruction | Interpreter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InterpretableInstruction
		public RuleCall getInterpretableInstructionParserRuleCall_0() { return cInterpretableInstructionParserRuleCall_0; }
		
		//Interpreter
		public RuleCall getInterpreterParserRuleCall_1() { return cInterpreterParserRuleCall_1; }
	}
	public class InterpretableInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.minijava_repl.xtext.MiniJava_repl.InterpretableInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeDeclaration_InstructionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOriginalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOriginalTypeDeclarationParserRuleCall_0_1_0 = (RuleCall)cOriginalAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImport_InstructionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOriginalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOriginalImportParserRuleCall_1_1_0 = (RuleCall)cOriginalAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBlock_InstructionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOriginalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginalBlockParserRuleCall_2_1_0 = (RuleCall)cOriginalAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableDeclaration_InstructionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOriginalAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOriginalVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cOriginalAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAssignment_InstructionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOriginalAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOriginalAssignmentParserRuleCall_4_1_0 = (RuleCall)cOriginalAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cForStatement_InstructionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOriginalAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOriginalForStatementParserRuleCall_5_1_0 = (RuleCall)cOriginalAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cIfStatement_InstructionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cOriginalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOriginalIfStatementParserRuleCall_6_1_0 = (RuleCall)cOriginalAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cWhileStatement_InstructionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cOriginalAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOriginalWhileStatementParserRuleCall_7_1_0 = (RuleCall)cOriginalAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cMethod_InstructionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cOriginalAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOriginalMethodParserRuleCall_8_1_0 = (RuleCall)cOriginalAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cExpression_InstructionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cOriginalAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOriginalExpressionParserRuleCall_9_1_0 = (RuleCall)cOriginalAssignment_9_1.eContents().get(0);
		
		//InterpretableInstruction:
		//	{TypeDeclaration_Instruction} original=TypeDeclaration | {Import_Instruction} original=Import | {Block_Instruction}
		//	original=Block | {VariableDeclaration_Instruction} original=VariableDeclaration | {Assignment_Instruction}
		//	original=Assignment | {ForStatement_Instruction} original=ForStatement | {IfStatement_Instruction}
		//	original=IfStatement | {WhileStatement_Instruction} original=WhileStatement | {Method_Instruction} original=Method |
		//	{Expression_Instruction} original=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeDeclaration_Instruction} original=TypeDeclaration | {Import_Instruction} original=Import | {Block_Instruction}
		//original=Block | {VariableDeclaration_Instruction} original=VariableDeclaration | {Assignment_Instruction}
		//original=Assignment | {ForStatement_Instruction} original=ForStatement | {IfStatement_Instruction} original=IfStatement |
		//{WhileStatement_Instruction} original=WhileStatement | {Method_Instruction} original=Method | {Expression_Instruction}
		//original=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeDeclaration_Instruction} original=TypeDeclaration
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeDeclaration_Instruction}
		public Action getTypeDeclaration_InstructionAction_0_0() { return cTypeDeclaration_InstructionAction_0_0; }
		
		//original=TypeDeclaration
		public Assignment getOriginalAssignment_0_1() { return cOriginalAssignment_0_1; }
		
		//TypeDeclaration
		public RuleCall getOriginalTypeDeclarationParserRuleCall_0_1_0() { return cOriginalTypeDeclarationParserRuleCall_0_1_0; }
		
		//{Import_Instruction} original=Import
		public Group getGroup_1() { return cGroup_1; }
		
		//{Import_Instruction}
		public Action getImport_InstructionAction_1_0() { return cImport_InstructionAction_1_0; }
		
		//original=Import
		public Assignment getOriginalAssignment_1_1() { return cOriginalAssignment_1_1; }
		
		//Import
		public RuleCall getOriginalImportParserRuleCall_1_1_0() { return cOriginalImportParserRuleCall_1_1_0; }
		
		//{Block_Instruction} original=Block
		public Group getGroup_2() { return cGroup_2; }
		
		//{Block_Instruction}
		public Action getBlock_InstructionAction_2_0() { return cBlock_InstructionAction_2_0; }
		
		//original=Block
		public Assignment getOriginalAssignment_2_1() { return cOriginalAssignment_2_1; }
		
		//Block
		public RuleCall getOriginalBlockParserRuleCall_2_1_0() { return cOriginalBlockParserRuleCall_2_1_0; }
		
		//{VariableDeclaration_Instruction} original=VariableDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableDeclaration_Instruction}
		public Action getVariableDeclaration_InstructionAction_3_0() { return cVariableDeclaration_InstructionAction_3_0; }
		
		//original=VariableDeclaration
		public Assignment getOriginalAssignment_3_1() { return cOriginalAssignment_3_1; }
		
		//VariableDeclaration
		public RuleCall getOriginalVariableDeclarationParserRuleCall_3_1_0() { return cOriginalVariableDeclarationParserRuleCall_3_1_0; }
		
		//{Assignment_Instruction} original=Assignment
		public Group getGroup_4() { return cGroup_4; }
		
		//{Assignment_Instruction}
		public Action getAssignment_InstructionAction_4_0() { return cAssignment_InstructionAction_4_0; }
		
		//original=Assignment
		public Assignment getOriginalAssignment_4_1() { return cOriginalAssignment_4_1; }
		
		//Assignment
		public RuleCall getOriginalAssignmentParserRuleCall_4_1_0() { return cOriginalAssignmentParserRuleCall_4_1_0; }
		
		//{ForStatement_Instruction} original=ForStatement
		public Group getGroup_5() { return cGroup_5; }
		
		//{ForStatement_Instruction}
		public Action getForStatement_InstructionAction_5_0() { return cForStatement_InstructionAction_5_0; }
		
		//original=ForStatement
		public Assignment getOriginalAssignment_5_1() { return cOriginalAssignment_5_1; }
		
		//ForStatement
		public RuleCall getOriginalForStatementParserRuleCall_5_1_0() { return cOriginalForStatementParserRuleCall_5_1_0; }
		
		//{IfStatement_Instruction} original=IfStatement
		public Group getGroup_6() { return cGroup_6; }
		
		//{IfStatement_Instruction}
		public Action getIfStatement_InstructionAction_6_0() { return cIfStatement_InstructionAction_6_0; }
		
		//original=IfStatement
		public Assignment getOriginalAssignment_6_1() { return cOriginalAssignment_6_1; }
		
		//IfStatement
		public RuleCall getOriginalIfStatementParserRuleCall_6_1_0() { return cOriginalIfStatementParserRuleCall_6_1_0; }
		
		//{WhileStatement_Instruction} original=WhileStatement
		public Group getGroup_7() { return cGroup_7; }
		
		//{WhileStatement_Instruction}
		public Action getWhileStatement_InstructionAction_7_0() { return cWhileStatement_InstructionAction_7_0; }
		
		//original=WhileStatement
		public Assignment getOriginalAssignment_7_1() { return cOriginalAssignment_7_1; }
		
		//WhileStatement
		public RuleCall getOriginalWhileStatementParserRuleCall_7_1_0() { return cOriginalWhileStatementParserRuleCall_7_1_0; }
		
		//{Method_Instruction} original=Method
		public Group getGroup_8() { return cGroup_8; }
		
		//{Method_Instruction}
		public Action getMethod_InstructionAction_8_0() { return cMethod_InstructionAction_8_0; }
		
		//original=Method
		public Assignment getOriginalAssignment_8_1() { return cOriginalAssignment_8_1; }
		
		//Method
		public RuleCall getOriginalMethodParserRuleCall_8_1_0() { return cOriginalMethodParserRuleCall_8_1_0; }
		
		//{Expression_Instruction} original=Expression
		public Group getGroup_9() { return cGroup_9; }
		
		//{Expression_Instruction}
		public Action getExpression_InstructionAction_9_0() { return cExpression_InstructionAction_9_0; }
		
		//original=Expression
		public Assignment getOriginalAssignment_9_1() { return cOriginalAssignment_9_1; }
		
		//Expression
		public RuleCall getOriginalExpressionParserRuleCall_9_1_0() { return cOriginalExpressionParserRuleCall_9_1_0; }
	}
	public class InterpreterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.minijava_repl.xtext.MiniJava_repl.Interpreter");
		private final Action cInterpreterAction = (Action)rule.eContents().get(1);
		
		//Interpreter:
		//	{Interpreter};
		@Override public ParserRule getRule() { return rule; }
		
		//{Interpreter}
		public Action getInterpreterAction() { return cInterpreterAction; }
	}
	
	
	private final EntryPointElements pEntryPoint;
	private final InterpretableInstructionElements pInterpretableInstruction;
	private final InterpreterElements pInterpreter;
	
	private final Grammar grammar;
	
	private final MiniJavaGrammarAccess gaMiniJava;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniJava_replGrammarAccess(GrammarProvider grammarProvider,
			MiniJavaGrammarAccess gaMiniJava,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMiniJava = gaMiniJava;
		this.gaTerminals = gaTerminals;
		this.pEntryPoint = new EntryPointElements();
		this.pInterpretableInstruction = new InterpretableInstructionElements();
		this.pInterpreter = new InterpreterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.minijava_repl.xtext.MiniJava_repl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MiniJavaGrammarAccess getMiniJavaGrammarAccess() {
		return gaMiniJava;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntryPoint ecore::EObject:
	//	InterpretableInstruction | Interpreter;
	public EntryPointElements getEntryPointAccess() {
		return pEntryPoint;
	}
	
	public ParserRule getEntryPointRule() {
		return getEntryPointAccess().getRule();
	}
	
	//InterpretableInstruction:
	//	{TypeDeclaration_Instruction} original=TypeDeclaration | {Import_Instruction} original=Import | {Block_Instruction}
	//	original=Block | {VariableDeclaration_Instruction} original=VariableDeclaration | {Assignment_Instruction}
	//	original=Assignment | {ForStatement_Instruction} original=ForStatement | {IfStatement_Instruction}
	//	original=IfStatement | {WhileStatement_Instruction} original=WhileStatement | {Method_Instruction} original=Method |
	//	{Expression_Instruction} original=Expression;
	public InterpretableInstructionElements getInterpretableInstructionAccess() {
		return pInterpretableInstruction;
	}
	
	public ParserRule getInterpretableInstructionRule() {
		return getInterpretableInstructionAccess().getRule();
	}
	
	//Interpreter:
	//	{Interpreter};
	public InterpreterElements getInterpreterAccess() {
		return pInterpreter;
	}
	
	public ParserRule getInterpreterRule() {
		return getInterpreterAccess().getRule();
	}
	
	//Program:
	//	('package' name=QualifiedName ';')?
	//	imports+=Import*
	//	classes+=TypeDeclaration*;
	public MiniJavaGrammarAccess.ProgramElements getProgramAccess() {
		return gaMiniJava.getProgramAccess();
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public MiniJavaGrammarAccess.ImportElements getImportAccess() {
		return gaMiniJava.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public MiniJavaGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaMiniJava.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public MiniJavaGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaMiniJava.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//TypeDeclaration:
	//	Clazz | Interface;
	public MiniJavaGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaMiniJava.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//Clazz:
	//	accessLevel=AccessLevel? isabstract?='abstract'? 'class' name=ID ('extends' superClass=[Clazz|QualifiedName])? (
	//	'implements' implementz+=[Interface|QualifiedName] (',' implementz+=[Interface|QualifiedName])*)? '{'
	//	members+=Member*
	//	'}';
	public MiniJavaGrammarAccess.ClazzElements getClazzAccess() {
		return gaMiniJava.getClazzAccess();
	}
	
	public ParserRule getClazzRule() {
		return getClazzAccess().getRule();
	}
	
	//Interface:
	//	accessLevel=AccessLevel? 'interface' name=ID ('extends' implementz+=[Interface|QualifiedName] (','
	//	implementz+=[Interface|QualifiedName])*)? '{'
	//	members+=Member*
	//	'}';
	public MiniJavaGrammarAccess.InterfaceElements getInterfaceAccess() {
		return gaMiniJava.getInterfaceAccess();
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Member:
	//	Field | Method;
	public MiniJavaGrammarAccess.MemberElements getMemberAccess() {
		return gaMiniJava.getMemberAccess();
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//Method:
	//	access=AccessLevel? isabstract?='abstract'? isstatic?='static'? typeRef=TypeRef name=ID?
	//	'(' (params+=Parameter (',' params+=Parameter)*)? ')' (body=Block | ';');
	public MiniJavaGrammarAccess.MethodElements getMethodAccess() {
		return gaMiniJava.getMethodAccess();
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Parameter:
	//	typeRef=TypeRef name=ID;
	public MiniJavaGrammarAccess.ParameterElements getParameterAccess() {
		return gaMiniJava.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Field:
	//	access=AccessLevel? typeRef=TypeRef name=ID ('=' defaultValue=Expression)? ';';
	public MiniJavaGrammarAccess.FieldElements getFieldAccess() {
		return gaMiniJava.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//enum AccessLevel:
	//	PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';
	public MiniJavaGrammarAccess.AccessLevelElements getAccessLevelAccess() {
		return gaMiniJava.getAccessLevelAccess();
	}
	
	public EnumRule getAccessLevelRule() {
		return getAccessLevelAccess().getRule();
	}
	
	//Block:
	//	{Block} '{' statements+=Statement* '}';
	public MiniJavaGrammarAccess.BlockElements getBlockAccess() {
		return gaMiniJava.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	Return ';' |
	//	=> Assignment ';' | IfStatement | WhileStatement | ForStatement | PrintStatement ";" | Block | SelectionExpression
	//	';';
	public MiniJavaGrammarAccess.StatementElements getStatementAccess() {
		return gaMiniJava.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//PrintStatement:
	//	"System" "." "out" "." "println" "(" expression=Expression ")";
	public MiniJavaGrammarAccess.PrintStatementElements getPrintStatementAccess() {
		return gaMiniJava.getPrintStatementAccess();
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//Return:
	//	'return' expression=Expression;
	public MiniJavaGrammarAccess.ReturnElements getReturnAccess() {
		return gaMiniJava.getReturnAccess();
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' expression=Expression ')' thenBlock=Block (=> 'else' elseBlock=Block)?;
	public MiniJavaGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaMiniJava.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' '(' condition=Expression ')' block=Block;
	public MiniJavaGrammarAccess.WhileStatementElements getWhileStatementAccess() {
		return gaMiniJava.getWhileStatementAccess();
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' '(' declaration=Assignment ';' condition=Expression ';' progression=Assignment ')' block=Block;
	public MiniJavaGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaMiniJava.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//TypeRef:
	//	SingleTypeRef ({ArrayTypeRef.typeRef=current} '[' ']')?;
	public MiniJavaGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaMiniJava.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//SingleTypeRef:
	//	ClassRef | {IntegerTypeRef} 'int' | {BooleanTypeRef} 'boolean' | {StringTypeRef} 'String' | {VoidTypeRef} 'void';
	public MiniJavaGrammarAccess.SingleTypeRefElements getSingleTypeRefAccess() {
		return gaMiniJava.getSingleTypeRefAccess();
	}
	
	public ParserRule getSingleTypeRefRule() {
		return getSingleTypeRefAccess().getRule();
	}
	
	//ClassRef:
	//	referencedClass=[TypeDeclaration|QualifiedName];
	public MiniJavaGrammarAccess.ClassRefElements getClassRefAccess() {
		return gaMiniJava.getClassRefAccess();
	}
	
	public ParserRule getClassRefRule() {
		return getClassRefAccess().getRule();
	}
	
	//NamedElement:
	//	TypedDeclaration | TypeDeclaration;
	public MiniJavaGrammarAccess.NamedElementElements getNamedElementAccess() {
		return gaMiniJava.getNamedElementAccess();
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//TypedDeclaration:
	//	Symbol | Member;
	public MiniJavaGrammarAccess.TypedDeclarationElements getTypedDeclarationAccess() {
		return gaMiniJava.getTypedDeclarationAccess();
	}
	
	public ParserRule getTypedDeclarationRule() {
		return getTypedDeclarationAccess().getRule();
	}
	
	//// here we need to set up an artificial priority with =>
	//Symbol:
	//	=> Parameter | VariableDeclaration;
	public MiniJavaGrammarAccess.SymbolElements getSymbolAccess() {
		return gaMiniJava.getSymbolAccess();
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//VariableDeclaration:
	//	typeRef=TypeRef name=ID;
	public MiniJavaGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaMiniJava.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Assignment:
	//	assignee=Assignee '=' value=Expression;
	public MiniJavaGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaMiniJava.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Assignee:
	//	=> ArrayAccess | VariableDeclaration;
	public MiniJavaGrammarAccess.AssigneeElements getAssigneeAccess() {
		return gaMiniJava.getAssigneeAccess();
	}
	
	public ParserRule getAssigneeRule() {
		return getAssigneeAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public MiniJavaGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMiniJava.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public MiniJavaGrammarAccess.OrElements getOrAccess() {
		return gaMiniJava.getOrAccess();
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public MiniJavaGrammarAccess.AndElements getAndAccess() {
		return gaMiniJava.getAndAccess();
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison (({Equality.left=current} "==" | {Inequality.left=current} "!=") right=Comparison)*;
	public MiniJavaGrammarAccess.EqualityElements getEqualityAccess() {
		return gaMiniJava.getEqualityAccess();
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	Modulo (({SuperiorOrEqual.left=current} ">=" | {InferiorOrEqual.left=current} "<=" | {Superior.left=current} ">" |
	//	{Inferior.left=current} "<") right=Modulo)*;
	public MiniJavaGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaMiniJava.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Modulo Expression:
	//	PlusOrMinus ({Modulo.left=current} "%" right=PlusOrMinus)*;
	public MiniJavaGrammarAccess.ModuloElements getModuloAccess() {
		return gaMiniJava.getModuloAccess();
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public MiniJavaGrammarAccess.PlusOrMinusElements getPlusOrMinusAccess() {
		return gaMiniJava.getPlusOrMinusAccess();
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	ArrayAccess (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ArrayAccess)*;
	public MiniJavaGrammarAccess.MulOrDivElements getMulOrDivAccess() {
		return gaMiniJava.getMulOrDivAccess();
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//ArrayAccess Expression:
	//	ArrayLength ({ArrayAccess.object=current} '[' index=Expression ']')?;
	public MiniJavaGrammarAccess.ArrayAccessElements getArrayAccessAccess() {
		return gaMiniJava.getArrayAccessAccess();
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}
	
	//ArrayLength Expression:
	//	Primary ({ArrayLength.array=current} '.' 'length')?;
	public MiniJavaGrammarAccess.ArrayLengthElements getArrayLengthAccess() {
		return gaMiniJava.getArrayLengthAccess();
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} => "!" expression=Primary | {Neg} => "-" expression=Primary | SelectionExpression;
	public MiniJavaGrammarAccess.PrimaryElements getPrimaryAccess() {
		return gaMiniJava.getPrimaryAccess();
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//SelectionExpression Expression:
	//	TerminalExpression ({FieldAccess.receiver=current} '.' field=[Field] | {MethodCall.receiver=current} '.'
	//	method=[Method]
	//	'(' (args+=Expression (',' args+=Expression)*)? ')')*;
	public MiniJavaGrammarAccess.SelectionExpressionElements getSelectionExpressionAccess() {
		return gaMiniJava.getSelectionExpressionAccess();
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	{NativeExpression} "'''" value=STRING "'''" | {StringConstant} value=STRING | {IntConstant} value=INT | {BoolConstant}
	//	value=('true' | 'false') | {This} 'this' | {Super} 'super' | {Null} 'null' | {NewObject} 'new' type=[Clazz] => '('
	//	(args+=Expression (',' args+=Expression)*)? ')' | {NewArray} 'new' type=TypeRef => '[' size=Expression ']' |
	//	{SymbolRef} symbol=[Symbol];
	public MiniJavaGrammarAccess.TerminalExpressionElements getTerminalExpressionAccess() {
		return gaMiniJava.getTerminalExpressionAccess();
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
