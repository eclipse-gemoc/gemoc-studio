/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.dsl.tests

import com.google.inject.Inject
import org.eclipse.gemoc.dsl.Dsl
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*
import org.eclipse.gemoc.tests.DslInjectorProvider

@RunWith(XtextRunner)
@InjectWith(DslInjectorProvider)
class DslParsingEmptyLineTest {
	@Inject
	ParseHelper<Dsl> parseHelper

	@Test
	def void minimal_empty_ending_line() {
		val result = parseHelper.parse('''
			name = my.language
			
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}

	@Test
	def void minimal_empty_ending_line_with_WS() {
		val result = parseHelper.parse('''
			name = my.language
			   
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}
	
	@Test
	def void minimal_empty_start_line() {
		val result = parseHelper.parse("\nname = my.language")
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}

	@Test
	def void minimal_empty_start_line_with_WS() {
		val result = parseHelper.parse("\n   name = my.language")
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}
	
	@Test
	def void multiple_empty_start_lines() {
		val result = parseHelper.parse("\n\nname = my.language")
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}

	@Test
	def void multiple_empty_start_line_with_WS() {
		val result = parseHelper.parse("\n   \n   name = my.language")
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}
	@Test
	def void minimal_empty_line() {
		val result = parseHelper.parse('''
			name = my.language
			
			mykey = myvalue
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}

	@Test
	def void minimal_empty_line_with_WS() {
		val result = parseHelper.parse('''
			name = my.language
			   
			mykey = myvalue
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}
	
	@Test
	def void multiple_empty_lines() {
		val result = parseHelper.parse('''
			name = my.language
			
			
			mykey = myvalue
			
			
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}

	@Test
	def void multiple_empty_lines_with_WS() {
		val result = parseHelper.parse('''
			name = my.language
			   
			   
			mykey = myvalue
			   
			   
		''')
		assertNotNull(result)
		assertTrue(
			"eResource.errors not Empty " + result.eResource.errors,
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		
	}
	
	@Test
	def void melange_generated_empty_lines() {
		val result = parseHelper.parse("name = org.eclipse.XSFSM\n\n ecore = platform:/resource/org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm/model/XSFSM.ecore\n\n k3 = org.eclipse.gemoc.StateMachineAspect,org.eclipse.gemoc.TransitionAspect\n")
			assertNotNull(result)
			assertTrue(
				"eResource.errors not Empty " + result.eResource.errors,
				result.eResource.errors.isEmpty
			)
			assertEquals("org.eclipse.XSFSM", result.name)
			assertTrue("no key named \"ecore\"", result.entries.exists[e|e.key == "ecore"])
			assertTrue("no key named \"k3\"", result.entries.exists[e|e.key == "k3"])
		}
	
	@Test
	def void melange_generated_empty_lines2() {
		val result = parseHelper.parse('''name = org.eclipse.gemoc.example.melangek3fsm.xsfsm.XSFSM
		
		 ecore = platform:/resource/org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm/model/XSFSM.ecore
		
		 k3 = org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm.aspects.StateAspect,org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm.aspects.StateMachineAspect,org.eclipse.gemoc.example.melangek3fsm.xsfsm.xsfsm.aspects.TransitionAspect
		
'''
		)
			assertNotNull(result)
			assertTrue(
				"eResource.errors not Empty " + result.eResource.errors,
				result.eResource.errors.isEmpty
			)
			assertEquals("org.eclipse.gemoc.example.melangek3fsm.xsfsm.XSFSM", result.name)
			assertTrue("no key named \"ecore\"", result.entries.exists[e|e.key == "ecore"])
			assertTrue("no key named \"k3\"", result.entries.exists[e|e.key == "k3"])
		}
}
