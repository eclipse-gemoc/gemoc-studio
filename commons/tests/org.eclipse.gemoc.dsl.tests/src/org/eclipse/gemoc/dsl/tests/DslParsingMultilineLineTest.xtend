/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.dsl.tests

import com.google.inject.Inject
import org.eclipse.gemoc.dsl.Dsl
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*
import org.eclipse.gemoc.tests.DslInjectorProvider

@RunWith(XtextRunner)
@InjectWith(DslInjectorProvider)
class DslParsingMultiLineTest {
	@Inject
	ParseHelper<Dsl> parseHelper
	

	
	@Test
	def void simple_key_2lines_value() {
		val result = parseHelper.parse('''
			name = my.language
			mykey = myvalue, \
				mysecondvalue
		''')
		assertNotNull(result)
		assertTrue("eResource.errors not Empty "+result.eResource.errors, 
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		assertTrue("no key named \"mykey\"", result.entries.exists[e | e.key == "mykey"])
		assertEquals("myvalue, mysecondvalue", result.entries.findFirst[e | e.key == "mykey"].value)
	}
	
	@Test
	def void simple_key_3lines_value() {
		val result = parseHelper.parse('''
			name = my.language
			mykey = myvalue, \
				mysecondvalue, \
				thirdValue
		''')
		assertNotNull(result)
		assertTrue("eResource.errors not Empty "+result.eResource.errors, 
			result.eResource.errors.isEmpty
		)
		assertEquals("my.language", result.name)
		assertTrue("no key named \"mykey\"", result.entries.exists[e | e.key == "mykey"])
		assertEquals("myvalue, mysecondvalue, thirdValue", result.entries.findFirst[e | e.key == "mykey"].value)
	}
	
	
}
