/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.gemoc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.gemoc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.gemoc.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDsl
entryRuleDsl
:
{ before(grammarAccess.getDslRule()); }
	 ruleDsl
{ after(grammarAccess.getDslRule()); } 
	 EOF 
;

// Rule Dsl
ruleDsl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDslAccess().getGroup()); }
		(rule__Dsl__Group__0)
		{ after(grammarAccess.getDslAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleValue
entryRuleSimpleValue
:
{ before(grammarAccess.getSimpleValueRule()); }
	 ruleSimpleValue
{ after(grammarAccess.getSimpleValueRule()); } 
	 EOF 
;

// Rule SimpleValue
ruleSimpleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleValueAccess().getGroup()); }
		(rule__SimpleValue__Group__0)
		{ after(grammarAccess.getSimpleValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompositeValue
entryRuleCompositeValue
:
{ before(grammarAccess.getCompositeValueRule()); }
	 ruleCompositeValue
{ after(grammarAccess.getCompositeValueRule()); } 
	 EOF 
;

// Rule CompositeValue
ruleCompositeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositeValueAccess().getGroup()); }
		(rule__CompositeValue__Group__0)
		{ after(grammarAccess.getCompositeValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisplayName
entryRuleDisplayName
:
{ before(grammarAccess.getDisplayNameRule()); }
	 ruleDisplayName
{ after(grammarAccess.getDisplayNameRule()); } 
	 EOF 
;

// Rule DisplayName
ruleDisplayName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisplayNameAccess().getGroup()); }
		(rule__DisplayName__Group__0)
		{ after(grammarAccess.getDisplayNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMetaprog
entryRuleMetaprog
:
{ before(grammarAccess.getMetaprogRule()); }
	 ruleMetaprog
{ after(grammarAccess.getMetaprogRule()); } 
	 EOF 
;

// Rule Metaprog
ruleMetaprog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMetaprogAccess().getGroup()); }
		(rule__Metaprog__Group__0)
		{ after(grammarAccess.getMetaprogAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractSyntax
entryRuleAbstractSyntax
:
{ before(grammarAccess.getAbstractSyntaxRule()); }
	 ruleAbstractSyntax
{ after(grammarAccess.getAbstractSyntaxRule()); } 
	 EOF 
;

// Rule AbstractSyntax
ruleAbstractSyntax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractSyntaxAccess().getGroup()); }
		(rule__AbstractSyntax__Group__0)
		{ after(grammarAccess.getAbstractSyntaxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSemantic
entryRuleSemantic
:
{ before(grammarAccess.getSemanticRule()); }
	 ruleSemantic
{ after(grammarAccess.getSemanticRule()); } 
	 EOF 
;

// Rule Semantic
ruleSemantic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSemanticAccess().getGroup()); }
		(rule__Semantic__Group__0)
		{ after(grammarAccess.getSemanticAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__NameAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getNameQUALIFIEDTerminalRuleCall_1_0_0()); }
		RULE_QUALIFIED
		{ after(grammarAccess.getDslAccess().getNameQUALIFIEDTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDslAccess().getNameIDTerminalRuleCall_1_0_1()); }
		RULE_ID
		{ after(grammarAccess.getDslAccess().getNameIDTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getSimpleValueParserRuleCall_0()); }
		ruleSimpleValue
		{ after(grammarAccess.getValueAccess().getSimpleValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getCompositeValueParserRuleCall_1()); }
		ruleCompositeValue
		{ after(grammarAccess.getValueAccess().getCompositeValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__0__Impl
	rule__Dsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getDSLKeyword_0()); }
	'DSL'
	{ after(grammarAccess.getDslAccess().getDSLKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__1__Impl
	rule__Dsl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getNameAssignment_1()); }
	(rule__Dsl__NameAssignment_1)
	{ after(grammarAccess.getDslAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__2__Impl
	rule__Dsl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getDslAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__3__Impl
	rule__Dsl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getDisplayNameAssignment_3()); }
	(rule__Dsl__DisplayNameAssignment_3)?
	{ after(grammarAccess.getDslAccess().getDisplayNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__4__Impl
	rule__Dsl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getMetaprogAssignment_4()); }
	(rule__Dsl__MetaprogAssignment_4)?
	{ after(grammarAccess.getDslAccess().getMetaprogAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__5__Impl
	rule__Dsl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getAbstractSyntaxAssignment_5()); }
	(rule__Dsl__AbstractSyntaxAssignment_5)?
	{ after(grammarAccess.getDslAccess().getAbstractSyntaxAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__6__Impl
	rule__Dsl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getSemanticAssignment_6()); }
	(rule__Dsl__SemanticAssignment_6)?
	{ after(grammarAccess.getDslAccess().getSemanticAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__7__Impl
	rule__Dsl__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getValuesAssignment_7()); }
	(rule__Dsl__ValuesAssignment_7)*
	{ after(grammarAccess.getDslAccess().getValuesAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dsl__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDslAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getDslAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group__0__Impl
	rule__SimpleValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getNameAssignment_0()); }
	(rule__SimpleValue__NameAssignment_0)
	{ after(grammarAccess.getSimpleValueAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group__1__Impl
	rule__SimpleValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getSimpleValueAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group__2__Impl
	rule__SimpleValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getValuesAssignment_2()); }
	(rule__SimpleValue__ValuesAssignment_2)
	{ after(grammarAccess.getSimpleValueAccess().getValuesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getGroup_3()); }
	(rule__SimpleValue__Group_3__0)*
	{ after(grammarAccess.getSimpleValueAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleValue__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group_3__0__Impl
	rule__SimpleValue__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getSimpleValueAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleValue__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleValueAccess().getValuesAssignment_3_1()); }
	(rule__SimpleValue__ValuesAssignment_3_1)
	{ after(grammarAccess.getSimpleValueAccess().getValuesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeValue__Group__0__Impl
	rule__CompositeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeValueAccess().getNameAssignment_0()); }
	(rule__CompositeValue__NameAssignment_0)
	{ after(grammarAccess.getCompositeValueAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeValue__Group__1__Impl
	rule__CompositeValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeValueAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCompositeValueAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeValue__Group__2__Impl
	rule__CompositeValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeValueAccess().getValuesAssignment_2()); }
	(rule__CompositeValue__ValuesAssignment_2)*
	{ after(grammarAccess.getCompositeValueAccess().getValuesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeValueAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getCompositeValueAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisplayName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayName__Group__0__Impl
	rule__DisplayName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayNameAccess().getDisplayNameAction_0()); }
	()
	{ after(grammarAccess.getDisplayNameAccess().getDisplayNameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayName__Group__1__Impl
	rule__DisplayName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayNameAccess().getDisplayNameKeyword_1()); }
	'displayName'
	{ after(grammarAccess.getDisplayNameAccess().getDisplayNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayName__Group__2__Impl
	rule__DisplayName__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayNameAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getDisplayNameAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisplayName__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisplayNameAccess().getValueAssignment_3()); }
	(rule__DisplayName__ValueAssignment_3)
	{ after(grammarAccess.getDisplayNameAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Metaprog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metaprog__Group__0__Impl
	rule__Metaprog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaprogAccess().getMetaprogAction_0()); }
	()
	{ after(grammarAccess.getMetaprogAccess().getMetaprogAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metaprog__Group__1__Impl
	rule__Metaprog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaprogAccess().getMetaprogKeyword_1()); }
	'metaprog'
	{ after(grammarAccess.getMetaprogAccess().getMetaprogKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metaprog__Group__2__Impl
	rule__Metaprog__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaprogAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getMetaprogAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Metaprog__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMetaprogAccess().getValueAssignment_3()); }
	(rule__Metaprog__ValueAssignment_3)
	{ after(grammarAccess.getMetaprogAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractSyntax__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractSyntax__Group__0__Impl
	rule__AbstractSyntax__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxAction_0()); }
	()
	{ after(grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractSyntax__Group__1__Impl
	rule__AbstractSyntax__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxKeyword_1()); }
	'abstract-syntax'
	{ after(grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractSyntax__Group__2__Impl
	rule__AbstractSyntax__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractSyntaxAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getAbstractSyntaxAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractSyntax__Group__3__Impl
	rule__AbstractSyntax__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractSyntaxAccess().getValuesAssignment_3()); }
	(rule__AbstractSyntax__ValuesAssignment_3)*
	{ after(grammarAccess.getAbstractSyntaxAccess().getValuesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractSyntax__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractSyntaxAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAbstractSyntaxAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Semantic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Semantic__Group__0__Impl
	rule__Semantic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSemanticAccess().getSemanticAction_0()); }
	()
	{ after(grammarAccess.getSemanticAccess().getSemanticAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Semantic__Group__1__Impl
	rule__Semantic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSemanticAccess().getSemanticKeyword_1()); }
	'semantic'
	{ after(grammarAccess.getSemanticAccess().getSemanticKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Semantic__Group__2__Impl
	rule__Semantic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSemanticAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSemanticAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Semantic__Group__3__Impl
	rule__Semantic__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSemanticAccess().getValuesAssignment_3()); }
	(rule__Semantic__ValuesAssignment_3)*
	{ after(grammarAccess.getSemanticAccess().getValuesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Semantic__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSemanticAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getSemanticAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dsl__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getNameAlternatives_1_0()); }
		(rule__Dsl__NameAlternatives_1_0)
		{ after(grammarAccess.getDslAccess().getNameAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__DisplayNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getDisplayNameDisplayNameParserRuleCall_3_0()); }
		ruleDisplayName
		{ after(grammarAccess.getDslAccess().getDisplayNameDisplayNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__MetaprogAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getMetaprogMetaprogParserRuleCall_4_0()); }
		ruleMetaprog
		{ after(grammarAccess.getDslAccess().getMetaprogMetaprogParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__AbstractSyntaxAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getAbstractSyntaxAbstractSyntaxParserRuleCall_5_0()); }
		ruleAbstractSyntax
		{ after(grammarAccess.getDslAccess().getAbstractSyntaxAbstractSyntaxParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__SemanticAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getSemanticSemanticParserRuleCall_6_0()); }
		ruleSemantic
		{ after(grammarAccess.getDslAccess().getSemanticSemanticParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dsl__ValuesAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDslAccess().getValuesValueParserRuleCall_7_0()); }
		ruleValue
		{ after(grammarAccess.getDslAccess().getValuesValueParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleValueAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleValueAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__ValuesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleValue__ValuesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeValueAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCompositeValueAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeValue__ValuesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeValueAccess().getValuesValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getCompositeValueAccess().getValuesValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisplayName__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisplayNameAccess().getValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getDisplayNameAccess().getValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metaprog__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetaprogAccess().getValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getMetaprogAccess().getValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractSyntax__ValuesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractSyntaxAccess().getValuesValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getAbstractSyntaxAccess().getValuesValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Semantic__ValuesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSemanticAccess().getValuesValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getSemanticAccess().getValuesValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_QUALIFIED : RULE_ID '.' RULE_ID ('.' RULE_ID)*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
