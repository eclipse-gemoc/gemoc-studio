/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.gemoc.ide.contentassist.antlr.internal.InternalDslParser;
import org.eclipse.gemoc.services.DslGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Inject
	private DslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDslAccess().getAlternatives_1(), "rule__Dsl__Alternatives_1");
					put(grammarAccess.getDslAccess().getAlternatives_6_2(), "rule__Dsl__Alternatives_6_2");
					put(grammarAccess.getVALUE_WORDAccess().getAlternatives_0(), "rule__VALUE_WORD__Alternatives_0");
					put(grammarAccess.getVALUE_WORDAccess().getAlternatives_1_1(), "rule__VALUE_WORD__Alternatives_1_1");
					put(grammarAccess.getVALUE_WORDAccess().getAlternatives_1_1_1(), "rule__VALUE_WORD__Alternatives_1_1_1");
					put(grammarAccess.getVALUE_WORDAccess().getAlternatives_1_2(), "rule__VALUE_WORD__Alternatives_1_2");
					put(grammarAccess.getWORDAccess().getAlternatives_1_1(), "rule__WORD__Alternatives_1_1");
					put(grammarAccess.getDslAccess().getGroup(), "rule__Dsl__Group__0");
					put(grammarAccess.getDslAccess().getGroup_1_0(), "rule__Dsl__Group_1_0__0");
					put(grammarAccess.getDslAccess().getGroup_1_1(), "rule__Dsl__Group_1_1__0");
					put(grammarAccess.getDslAccess().getGroup_2(), "rule__Dsl__Group_2__0");
					put(grammarAccess.getDslAccess().getGroup_2_1(), "rule__Dsl__Group_2_1__0");
					put(grammarAccess.getDslAccess().getGroup_5(), "rule__Dsl__Group_5__0");
					put(grammarAccess.getDslAccess().getGroup_5_0(), "rule__Dsl__Group_5_0__0");
					put(grammarAccess.getDslAccess().getGroup_5_1(), "rule__Dsl__Group_5_1__0");
					put(grammarAccess.getDslAccess().getGroup_6(), "rule__Dsl__Group_6__0");
					put(grammarAccess.getDslAccess().getGroup_6_2_0(), "rule__Dsl__Group_6_2_0__0");
					put(grammarAccess.getDslAccess().getGroup_6_2_1(), "rule__Dsl__Group_6_2_1__0");
					put(grammarAccess.getEntryAccess().getGroup(), "rule__Entry__Group__0");
					put(grammarAccess.getEntryAccess().getGroup_3(), "rule__Entry__Group_3__0");
					put(grammarAccess.getVALUE_WORDAccess().getGroup(), "rule__VALUE_WORD__Group__0");
					put(grammarAccess.getVALUE_WORDAccess().getGroup_1(), "rule__VALUE_WORD__Group_1__0");
					put(grammarAccess.getMULTILINEAccess().getGroup(), "rule__MULTILINE__Group__0");
					put(grammarAccess.getMULTILINEAccess().getGroup_1(), "rule__MULTILINE__Group_1__0");
					put(grammarAccess.getWORDAccess().getGroup(), "rule__WORD__Group__0");
					put(grammarAccess.getWORDAccess().getGroup_1(), "rule__WORD__Group_1__0");
					put(grammarAccess.getDslAccess().getEntriesAssignment_4(), "rule__Dsl__EntriesAssignment_4");
					put(grammarAccess.getDslAccess().getEntriesAssignment_5_3(), "rule__Dsl__EntriesAssignment_5_3");
					put(grammarAccess.getEntryAccess().getKeyAssignment_1(), "rule__Entry__KeyAssignment_1");
					put(grammarAccess.getEntryAccess().getValueAssignment_3_2(), "rule__Entry__ValueAssignment_3_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
