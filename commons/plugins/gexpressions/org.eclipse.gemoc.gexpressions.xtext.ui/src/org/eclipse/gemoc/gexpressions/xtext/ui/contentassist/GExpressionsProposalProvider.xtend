/*
 * generated by Xtext
 */
package org.eclipse.gemoc.gexpressions.xtext.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EClassifier
import org.eclipse.emf.ecore.EDataType
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.gemoc.gexpressions.xtext.services.GExpressionsGrammarAccess
import org.eclipse.gemoc.gexpressions.xtext.ui.contentassist.AbstractGExpressionsProposalProvider

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class GExpressionsProposalProvider extends AbstractGExpressionsProposalProvider {

	@Inject GExpressionsGrammarAccess grammarAccess
	
//	override completeKeyword(Keyword keyword, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		println("Hello world from proposal provider with: ")
//		println(keyword.value)
//		println(context.previousModel)
//		println(context.currentModel)
//	}
	
//	override complete_NavigationOperator(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		println("Hello world from proposal provider with: ")
//		println(model)
//		println(context.previousModel)
//		println(context.currentModel)
		
		
		
//		
//		if (keyword.equals(".") || keyword.equals("->")) {
//			switch (context.previousModel) {
//				GNavigationExpression: {
//					println("ProposalProvider: GNavExp")
//					// If we are completing a navigation expression with "."
//					// Retrieve the feature type and if it is an EDataType do not suggest "."
//					val navExp = (context.previousModel as GNavigationExpression)
//					val eo = navExp.referencedEObject
//					if (eo != null) {
//						var EClassifier classifier
//						switch (eo) {
//							ETypedElement: classifier = (eo as ETypedElement).EType
//							EClassifier: classifier = eo as EClassifier
//							default: classifier = eo.eClass()
//						}
//
//						dealWithClassifier(classifier, keyword, contentAssistContext, acceptor)
//					}
//					return
//				}
//				GReferenceExpression: {
//					println("ProposalProvider: GRefExp")
//					// An EObject should not allow "." if its type is an EDataType
//					val refExp = (contentAssistContext.previousModel as GReferenceExpression)
//					dealWithEObject(refExp.referencedEObject, keyword, contentAssistContext, acceptor)
//				}
//				default: {
//					println("ProposalProvider: default")
//					// By default, allow everything
//					super.completeKeyword(keyword, contentAssistContext, acceptor);
//				}
//			}
//		} else {
//			super.completeKeyword(keyword, contentAssistContext, acceptor);
//		}
//	}

	/**
	 * Defines what to do with an EClassifier. Basically, either it is an EDataType and it should not allow the "." or it is an EClass and it should allow ".".
	 */
	def protected void dealWithClassifier(EClassifier classifier, Keyword keyword,
		ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		switch (classifier) {
			EDataType: return
			default: super.completeKeyword(keyword, contentAssistContext, acceptor)
		}
	}

	/**
	 * Default behaviour, should be overriden most of the time
	 */
	def protected void dealWithEObject(EObject eo, Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
			// TODO HERE
		super.completeKeyword(keyword, contentAssistContext, acceptor)
	}
}
