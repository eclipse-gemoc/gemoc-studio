/*
 * generated by Xtext
 */
package org.eclipse.gemoc.gexpressions.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsGImportStatementParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsGExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsGExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		
		////-----------------------------------------------------------------------------
		//// Main and import in order to be able to test the language as standalone
		////-----------------------------------------------------------------------------
		//GProgram:
		//	imports+=GImportStatement* (expressions+=GExpression (';'? expressions+=GExpression)*)?;
		@Override public ParserRule getRule() { return rule; }

		//imports+=GImportStatement* (expressions+=GExpression (';'? expressions+=GExpression)*)?
		public Group getGroup() { return cGroup; }

		//imports+=GImportStatement*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//GImportStatement
		public RuleCall getImportsGImportStatementParserRuleCall_0_0() { return cImportsGImportStatementParserRuleCall_0_0; }

		//(expressions+=GExpression (';'? expressions+=GExpression)*)?
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=GExpression
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//GExpression
		public RuleCall getExpressionsGExpressionParserRuleCall_1_0_0() { return cExpressionsGExpressionParserRuleCall_1_0_0; }

		//(';'? expressions+=GExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//';'?
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//expressions+=GExpression
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//GExpression
		public RuleCall getExpressionsGExpressionParserRuleCall_1_1_1_0() { return cExpressionsGExpressionParserRuleCall_1_1_1_0; }
	}

	public class GImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//GImportStatement:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class GExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
		private final RuleCall cGOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//GExpression:
		//	GOrExpression;
		@Override public ParserRule getRule() { return rule; }

		//GOrExpression
		public RuleCall getGOrExpressionParserRuleCall() { return cGOrExpressionParserRuleCall; }
	}

	public class GOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		////-----------------------------------------------------------------------------
		//// Binary and unary operators, navigation, reference, ...
		////-----------------------------------------------------------------------------
		//GOrExpression GExpression:
		//	GXorExpression ({GOrExpression.leftOperand=current} operator=GOrOperator
		//	rightOperand=GXorExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GXorExpression ({GOrExpression.leftOperand=current} operator=GOrOperator rightOperand=GXorExpression)*
		public Group getGroup() { return cGroup; }

		//GXorExpression
		public RuleCall getGXorExpressionParserRuleCall_0() { return cGXorExpressionParserRuleCall_0; }

		//({GOrExpression.leftOperand=current} operator=GOrOperator rightOperand=GXorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GOrExpression.leftOperand=current}
		public Action getGOrExpressionLeftOperandAction_1_0() { return cGOrExpressionLeftOperandAction_1_0; }

		//operator=GOrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GOrOperator
		public RuleCall getOperatorGOrOperatorEnumRuleCall_1_1_0() { return cOperatorGOrOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GXorExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GXorExpression
		public RuleCall getRightOperandGXorExpressionParserRuleCall_1_2_0() { return cRightOperandGXorExpressionParserRuleCall_1_2_0; }
	}

	public class GXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGXorExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGXorOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GXorExpression GExpression:
		//	GAndExpression ({GXorExpression.leftOperand=current} operator=GXorOperator
		//	rightOperand=GAndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GAndExpression ({GXorExpression.leftOperand=current} operator=GXorOperator rightOperand=GAndExpression)*
		public Group getGroup() { return cGroup; }

		//GAndExpression
		public RuleCall getGAndExpressionParserRuleCall_0() { return cGAndExpressionParserRuleCall_0; }

		//({GXorExpression.leftOperand=current} operator=GXorOperator rightOperand=GAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GXorExpression.leftOperand=current}
		public Action getGXorExpressionLeftOperandAction_1_0() { return cGXorExpressionLeftOperandAction_1_0; }

		//operator=GXorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GXorOperator
		public RuleCall getOperatorGXorOperatorEnumRuleCall_1_1_0() { return cOperatorGXorOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GAndExpression
		public RuleCall getRightOperandGAndExpressionParserRuleCall_1_2_0() { return cRightOperandGAndExpressionParserRuleCall_1_2_0; }
	}

	public class GAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GAndExpression GExpression:
		//	GEqualityExpression ({GAndExpression.leftOperand=current} operator=GAndOperator
		//	rightOperand=GEqualityExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GEqualityExpression ({GAndExpression.leftOperand=current} operator=GAndOperator rightOperand=GEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//GEqualityExpression
		public RuleCall getGEqualityExpressionParserRuleCall_0() { return cGEqualityExpressionParserRuleCall_0; }

		//({GAndExpression.leftOperand=current} operator=GAndOperator rightOperand=GEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GAndExpression.leftOperand=current}
		public Action getGAndExpressionLeftOperandAction_1_0() { return cGAndExpressionLeftOperandAction_1_0; }

		//operator=GAndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GAndOperator
		public RuleCall getOperatorGAndOperatorEnumRuleCall_1_1_0() { return cOperatorGAndOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GEqualityExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GEqualityExpression
		public RuleCall getRightOperandGEqualityExpressionParserRuleCall_1_2_0() { return cRightOperandGEqualityExpressionParserRuleCall_1_2_0; }
	}

	public class GEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGRelationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGEqualityExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GEqualityExpression GExpression:
		//	GRelationExpression ({GEqualityExpression.leftOperand=current} operator=GEqualityOperator
		//	rightOperand=GRelationExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GRelationExpression ({GEqualityExpression.leftOperand=current} operator=GEqualityOperator
		//rightOperand=GRelationExpression)*
		public Group getGroup() { return cGroup; }

		//GRelationExpression
		public RuleCall getGRelationExpressionParserRuleCall_0() { return cGRelationExpressionParserRuleCall_0; }

		//({GEqualityExpression.leftOperand=current} operator=GEqualityOperator rightOperand=GRelationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GEqualityExpression.leftOperand=current}
		public Action getGEqualityExpressionLeftOperandAction_1_0() { return cGEqualityExpressionLeftOperandAction_1_0; }

		//operator=GEqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GEqualityOperator
		public RuleCall getOperatorGEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorGEqualityOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GRelationExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GRelationExpression
		public RuleCall getRightOperandGRelationExpressionParserRuleCall_1_2_0() { return cRightOperandGRelationExpressionParserRuleCall_1_2_0; }
	}

	public class GRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGRelationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGRelationOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGAdditionExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GRelationExpression GExpression:
		//	GAdditionExpression ({GRelationExpression.leftOperand=current} operator=GRelationOperator
		//	rightOperand=GAdditionExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GAdditionExpression ({GRelationExpression.leftOperand=current} operator=GRelationOperator
		//rightOperand=GAdditionExpression)*
		public Group getGroup() { return cGroup; }

		//GAdditionExpression
		public RuleCall getGAdditionExpressionParserRuleCall_0() { return cGAdditionExpressionParserRuleCall_0; }

		//({GRelationExpression.leftOperand=current} operator=GRelationOperator rightOperand=GAdditionExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GRelationExpression.leftOperand=current}
		public Action getGRelationExpressionLeftOperandAction_1_0() { return cGRelationExpressionLeftOperandAction_1_0; }

		//operator=GRelationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GRelationOperator
		public RuleCall getOperatorGRelationOperatorEnumRuleCall_1_1_0() { return cOperatorGRelationOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GAdditionExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GAdditionExpression
		public RuleCall getRightOperandGAdditionExpressionParserRuleCall_1_2_0() { return cRightOperandGAdditionExpressionParserRuleCall_1_2_0; }
	}

	public class GAdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGAdditionExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGAdditionOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GAdditionExpression GExpression:
		//	GMultiplicationExpression ({GAdditionExpression.leftOperand=current} operator=GAdditionOperator
		//	rightOperand=GMultiplicationExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GMultiplicationExpression ({GAdditionExpression.leftOperand=current} operator=GAdditionOperator
		//rightOperand=GMultiplicationExpression)*
		public Group getGroup() { return cGroup; }

		//GMultiplicationExpression
		public RuleCall getGMultiplicationExpressionParserRuleCall_0() { return cGMultiplicationExpressionParserRuleCall_0; }

		//({GAdditionExpression.leftOperand=current} operator=GAdditionOperator rightOperand=GMultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GAdditionExpression.leftOperand=current}
		public Action getGAdditionExpressionLeftOperandAction_1_0() { return cGAdditionExpressionLeftOperandAction_1_0; }

		//operator=GAdditionOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GAdditionOperator
		public RuleCall getOperatorGAdditionOperatorEnumRuleCall_1_1_0() { return cOperatorGAdditionOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GMultiplicationExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GMultiplicationExpression
		public RuleCall getRightOperandGMultiplicationExpressionParserRuleCall_1_2_0() { return cRightOperandGMultiplicationExpressionParserRuleCall_1_2_0; }
	}

	public class GMultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GMultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGNegationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGMultiplicationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGMultiplicationOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandGNegationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//GMultiplicationExpression GExpression:
		//	GNegationExpression ({GMultiplicationExpression.leftOperand=current} operator=GMultiplicationOperator
		//	rightOperand=GNegationExpression)*
		@Override public ParserRule getRule() { return rule; }

		//GNegationExpression ({GMultiplicationExpression.leftOperand=current} operator=GMultiplicationOperator
		//rightOperand=GNegationExpression)*
		public Group getGroup() { return cGroup; }

		//GNegationExpression
		public RuleCall getGNegationExpressionParserRuleCall_0() { return cGNegationExpressionParserRuleCall_0; }

		//({GMultiplicationExpression.leftOperand=current} operator=GMultiplicationOperator rightOperand=GNegationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{GMultiplicationExpression.leftOperand=current}
		public Action getGMultiplicationExpressionLeftOperandAction_1_0() { return cGMultiplicationExpressionLeftOperandAction_1_0; }

		//operator=GMultiplicationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GMultiplicationOperator
		public RuleCall getOperatorGMultiplicationOperatorEnumRuleCall_1_1_0() { return cOperatorGMultiplicationOperatorEnumRuleCall_1_1_0; }

		//rightOperand=GNegationExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//GNegationExpression
		public RuleCall getRightOperandGNegationExpressionParserRuleCall_1_2_0() { return cRightOperandGNegationExpressionParserRuleCall_1_2_0; }
	}

	public class GNegationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNegationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGNavigationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGNegationExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorGNegationOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandGNavigationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//GNegationExpression GExpression:
		//	GNavigationExpression
		//	| {GNegationExpression} operator=GNegationOperator operand=GNavigationExpression
		@Override public ParserRule getRule() { return rule; }

		//GNavigationExpression | {GNegationExpression} operator=GNegationOperator operand=GNavigationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//GNavigationExpression
		public RuleCall getGNavigationExpressionParserRuleCall_0() { return cGNavigationExpressionParserRuleCall_0; }

		//{GNegationExpression} operator=GNegationOperator operand=GNavigationExpression
		public Group getGroup_1() { return cGroup_1; }

		//{GNegationExpression}
		public Action getGNegationExpressionAction_1_0() { return cGNegationExpressionAction_1_0; }

		//operator=GNegationOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//GNegationOperator
		public RuleCall getOperatorGNegationOperatorEnumRuleCall_1_1_0() { return cOperatorGNegationOperatorEnumRuleCall_1_1_0; }

		//operand=GNavigationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//GNavigationExpression
		public RuleCall getOperandGNavigationExpressionParserRuleCall_1_2_0() { return cOperandGNavigationExpressionParserRuleCall_1_2_0; }
	}

	public class GNavigationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNavigationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGReferenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cGNavigationExpressionBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cNavigationOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cReferencedEObjectAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cReferencedEObjectEObjectCrossReference_1_2_0 = (CrossReference)cReferencedEObjectAssignment_1_2.eContents().get(0);
		private final RuleCall cReferencedEObjectEObjectIDTerminalRuleCall_1_2_0_1 = (RuleCall)cReferencedEObjectEObjectCrossReference_1_2_0.eContents().get(1);
		
		//GNavigationExpression GExpression:
		//	GReferenceExpression ({GNavigationExpression.body=current} NavigationOperator
		//	referencedEObject=[ecore::EObject])*
		@Override public ParserRule getRule() { return rule; }

		//GReferenceExpression ({GNavigationExpression.body=current} NavigationOperator referencedEObject=[ecore::EObject])*
		public Group getGroup() { return cGroup; }

		//GReferenceExpression
		public RuleCall getGReferenceExpressionParserRuleCall_0() { return cGReferenceExpressionParserRuleCall_0; }

		//({GNavigationExpression.body=current} NavigationOperator referencedEObject=[ecore::EObject])*
		public Group getGroup_1() { return cGroup_1; }

		//{GNavigationExpression.body=current}
		public Action getGNavigationExpressionBodyAction_1_0() { return cGNavigationExpressionBodyAction_1_0; }

		//NavigationOperator
		public RuleCall getNavigationOperatorParserRuleCall_1_1() { return cNavigationOperatorParserRuleCall_1_1; }

		//referencedEObject=[ecore::EObject]
		public Assignment getReferencedEObjectAssignment_1_2() { return cReferencedEObjectAssignment_1_2; }

		//[ecore::EObject]
		public CrossReference getReferencedEObjectEObjectCrossReference_1_2_0() { return cReferencedEObjectEObjectCrossReference_1_2_0; }

		//ID
		public RuleCall getReferencedEObjectEObjectIDTerminalRuleCall_1_2_0_1() { return cReferencedEObjectEObjectIDTerminalRuleCall_1_2_0_1; }
	}

	public class GReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GReferenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGReferenceExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cReferencedEObjectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReferencedEObjectEObjectCrossReference_1_1_0 = (CrossReference)cReferencedEObjectAssignment_1_1.eContents().get(0);
		private final RuleCall cReferencedEObjectEObjectIDTerminalRuleCall_1_1_0_1 = (RuleCall)cReferencedEObjectEObjectCrossReference_1_1_0.eContents().get(1);
		
		//GReferenceExpression GExpression:
		//	GPrimaryExpression
		//	| {GReferenceExpression} referencedEObject=[ecore::EObject]
		@Override public ParserRule getRule() { return rule; }

		//GPrimaryExpression | {GReferenceExpression} referencedEObject=[ecore::EObject]
		public Alternatives getAlternatives() { return cAlternatives; }

		//GPrimaryExpression
		public RuleCall getGPrimaryExpressionParserRuleCall_0() { return cGPrimaryExpressionParserRuleCall_0; }

		//{GReferenceExpression} referencedEObject=[ecore::EObject]
		public Group getGroup_1() { return cGroup_1; }

		//{GReferenceExpression}
		public Action getGReferenceExpressionAction_1_0() { return cGReferenceExpressionAction_1_0; }

		//referencedEObject=[ecore::EObject]
		public Assignment getReferencedEObjectAssignment_1_1() { return cReferencedEObjectAssignment_1_1; }

		//[ecore::EObject]
		public CrossReference getReferencedEObjectEObjectCrossReference_1_1_0() { return cReferencedEObjectEObjectCrossReference_1_1_0; }

		//ID
		public RuleCall getReferencedEObjectEObjectIDTerminalRuleCall_1_1_0_1() { return cReferencedEObjectEObjectIDTerminalRuleCall_1_1_0_1; }
	}

	public class GPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGStringExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGNumericExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGEnumLiteralExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGIfExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGBraceExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////-----------------------------------------------------------------------------
		//// Primary expressions
		////-----------------------------------------------------------------------------
		//GPrimaryExpression GExpression:
		//	GStringExpression
		//	| GBooleanExpression
		//	| GNumericExpression
		//	| GEnumLiteralExpression
		//	| GIfExpression
		//	| GBraceExpression
		@Override public ParserRule getRule() { return rule; }

		//GStringExpression | GBooleanExpression | GNumericExpression | GEnumLiteralExpression | GIfExpression | GBraceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//GStringExpression
		public RuleCall getGStringExpressionParserRuleCall_0() { return cGStringExpressionParserRuleCall_0; }

		//GBooleanExpression
		public RuleCall getGBooleanExpressionParserRuleCall_1() { return cGBooleanExpressionParserRuleCall_1; }

		//GNumericExpression
		public RuleCall getGNumericExpressionParserRuleCall_2() { return cGNumericExpressionParserRuleCall_2; }

		//GEnumLiteralExpression
		public RuleCall getGEnumLiteralExpressionParserRuleCall_3() { return cGEnumLiteralExpressionParserRuleCall_3; }

		//GIfExpression
		public RuleCall getGIfExpressionParserRuleCall_4() { return cGIfExpressionParserRuleCall_4; }

		//GBraceExpression
		public RuleCall getGBraceExpressionParserRuleCall_5() { return cGBraceExpressionParserRuleCall_5; }
	}

	public class GStringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GStringExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGStringExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//GStringExpression GExpression:
		//	{GStringExpression} value=STRING
		@Override public ParserRule getRule() { return rule; }

		//{GStringExpression} value=STRING
		public Group getGroup() { return cGroup; }

		//{GStringExpression}
		public Action getGStringExpressionAction_0() { return cGStringExpressionAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class GBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//GBooleanExpression GExpression:
		//	{GBooleanExpression} value=BOOLEAN
		@Override public ParserRule getRule() { return rule; }

		//{GBooleanExpression} value=BOOLEAN
		public Group getGroup() { return cGroup; }

		//{GBooleanExpression}
		public Action getGBooleanExpressionAction_0() { return cGBooleanExpressionAction_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_1_0() { return cValueBOOLEANTerminalRuleCall_1_0; }
	}

	public class GNumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNumericExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGIntegerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGDoubleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GNumericExpression GExpression:
		//	GIntegerExpression
		//	| GDoubleExpression
		@Override public ParserRule getRule() { return rule; }

		//GIntegerExpression | GDoubleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//GIntegerExpression
		public RuleCall getGIntegerExpressionParserRuleCall_0() { return cGIntegerExpressionParserRuleCall_0; }

		//GDoubleExpression
		public RuleCall getGDoubleExpressionParserRuleCall_1() { return cGDoubleExpressionParserRuleCall_1; }
	}

	public class GIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GIntegerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGIntegerExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//GIntegerExpression GExpression:
		//	{GIntegerExpression} value=INT
		@Override public ParserRule getRule() { return rule; }

		//{GIntegerExpression} value=INT
		public Group getGroup() { return cGroup; }

		//{GIntegerExpression}
		public Action getGIntegerExpressionAction_0() { return cGIntegerExpressionAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class GDoubleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GDoubleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGDoubleExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//GDoubleExpression GExpression:
		//	{GDoubleExpression} value=DOUBLE
		@Override public ParserRule getRule() { return rule; }

		//{GDoubleExpression} value=DOUBLE
		public Group getGroup() { return cGroup; }

		//{GDoubleExpression}
		public Action getGDoubleExpressionAction_0() { return cGDoubleExpressionAction_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_0() { return cValueDOUBLETerminalRuleCall_1_0; }
	}

	public class GEnumLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GEnumLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGEnumLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueEEnumLiteralCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueEEnumLiteralQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueEEnumLiteralCrossReference_2_0.eContents().get(1);
		
		//GEnumLiteralExpression GExpression:
		//	{GEnumLiteralExpression}
		//	'#' value=[ecore::EEnumLiteral|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//{GEnumLiteralExpression} '#' value=[ecore::EEnumLiteral|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{GEnumLiteralExpression}
		public Action getGEnumLiteralExpressionAction_0() { return cGEnumLiteralExpressionAction_0; }

		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//value=[ecore::EEnumLiteral|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[ecore::EEnumLiteral|QualifiedName]
		public CrossReference getValueEEnumLiteralCrossReference_2_0() { return cValueEEnumLiteralCrossReference_2_0; }

		//QualifiedName
		public RuleCall getValueEEnumLiteralQualifiedNameParserRuleCall_2_0_1() { return cValueEEnumLiteralQualifiedNameParserRuleCall_2_0_1; }
	}

	public class GIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionGExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionGExpressionParserRuleCall_4_0 = (RuleCall)cThenExpressionAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElseExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseExpressionGExpressionParserRuleCall_6_0 = (RuleCall)cElseExpressionAssignment_6.eContents().get(0);
		private final Keyword cEndifKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GIfExpression GExpression:
		//	{GIfExpression}
		//	'if' condition=GExpression
		//	'then' thenExpression=GExpression
		//	'else' elseExpression=GExpression
		//	'endif'
		@Override public ParserRule getRule() { return rule; }

		//{GIfExpression} 'if' condition=GExpression 'then' thenExpression=GExpression 'else' elseExpression=GExpression 'endif'
		public Group getGroup() { return cGroup; }

		//{GIfExpression}
		public Action getGIfExpressionAction_0() { return cGIfExpressionAction_0; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//condition=GExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//GExpression
		public RuleCall getConditionGExpressionParserRuleCall_2_0() { return cConditionGExpressionParserRuleCall_2_0; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenExpression=GExpression
		public Assignment getThenExpressionAssignment_4() { return cThenExpressionAssignment_4; }

		//GExpression
		public RuleCall getThenExpressionGExpressionParserRuleCall_4_0() { return cThenExpressionGExpressionParserRuleCall_4_0; }

		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }

		//elseExpression=GExpression
		public Assignment getElseExpressionAssignment_6() { return cElseExpressionAssignment_6; }

		//GExpression
		public RuleCall getElseExpressionGExpressionParserRuleCall_6_0() { return cElseExpressionGExpressionParserRuleCall_6_0; }

		//'endif'
		public Keyword getEndifKeyword_7() { return cEndifKeyword_7; }
	}

	public class GBraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GBraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGBraceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInnerExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInnerExpressionGExpressionParserRuleCall_2_0 = (RuleCall)cInnerExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GBraceExpression GExpression:
		//	{GBraceExpression}
		//	'('
		//	innerExpression=GExpression
		//	')'
		@Override public ParserRule getRule() { return rule; }

		//{GBraceExpression} '(' innerExpression=GExpression ')'
		public Group getGroup() { return cGroup; }

		//{GBraceExpression}
		public Action getGBraceExpressionAction_0() { return cGBraceExpressionAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//innerExpression=GExpression
		public Assignment getInnerExpressionAssignment_2() { return cInnerExpressionAssignment_2; }

		//GExpression
		public RuleCall getInnerExpressionGExpressionParserRuleCall_2_0() { return cInnerExpressionGExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.NavigationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////-----------------------------------------------------------------------------
		//// Additional terminals
		////-----------------------------------------------------------------------------
		//NavigationOperator:
		//	'.'
		//	| '->';
		@Override public ParserRule getRule() { return rule; }

		//'.' | '->'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (=> '.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID (=> '.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> '.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class GAndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAndOperator");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum GAndOperator:
		//	AND='and';
		public EnumRule getRule() { return rule; }

		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }

		//'and'
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}

	public class GXorOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GXorOperator");
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cXORXorKeyword_0 = (Keyword)cXOREnumLiteralDeclaration.eContents().get(0);
		
		//enum GXorOperator:
		//	XOR='xor';
		public EnumRule getRule() { return rule; }

		//XOR='xor'
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration() { return cXOREnumLiteralDeclaration; }

		//'xor'
		public Keyword getXORXorKeyword_0() { return cXORXorKeyword_0; }
	}

	public class GOrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GOrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum GOrOperator:
		//	OR='or';
		public EnumRule getRule() { return rule; }

		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }

		//'or'
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}

	public class GEqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GEqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOTEQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GEqualityOperator:
		//	EQUAL='='
		//	| NOTEQUAL='<>';
		public EnumRule getRule() { return rule; }

		//EQUAL='=' | NOTEQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }

		//NOTEQUAL='<>'
		public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_1() { return cNOTEQUALEnumLiteralDeclaration_1; }

		//'<>'
		public Keyword getNOTEQUALLessThanSignGreaterThanSignKeyword_1_0() { return cNOTEQUALLessThanSignGreaterThanSignKeyword_1_0; }
	}

	public class GRelationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GRelationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSEQUALLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESSEQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATEREQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATEREQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum GRelationOperator:
		//	LESS='<'
		//	| GREATER='>'
		//	| LESSEQUAL='<='
		//	| GREATEREQUAL='>=';
		public EnumRule getRule() { return rule; }

		//LESS='<' | GREATER='>' | LESSEQUAL='<=' | GREATEREQUAL='>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }

		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }

		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }

		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }

		//LESSEQUAL='<='
		public EnumLiteralDeclaration getLESSEQUALEnumLiteralDeclaration_2() { return cLESSEQUALEnumLiteralDeclaration_2; }

		//'<='
		public Keyword getLESSEQUALLessThanSignEqualsSignKeyword_2_0() { return cLESSEQUALLessThanSignEqualsSignKeyword_2_0; }

		//GREATEREQUAL='>='
		public EnumLiteralDeclaration getGREATEREQUALEnumLiteralDeclaration_3() { return cGREATEREQUALEnumLiteralDeclaration_3; }

		//'>='
		public Keyword getGREATEREQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATEREQUALGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class GAdditionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDITIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDITIONPlusSignKeyword_0_0 = (Keyword)cADDITIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTIONHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GAdditionOperator:
		//	ADDITION='+'
		//	| SUBTRACTION='-';
		public EnumRule getRule() { return rule; }

		//ADDITION='+' | SUBTRACTION='-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADDITION='+'
		public EnumLiteralDeclaration getADDITIONEnumLiteralDeclaration_0() { return cADDITIONEnumLiteralDeclaration_0; }

		//'+'
		public Keyword getADDITIONPlusSignKeyword_0_0() { return cADDITIONPlusSignKeyword_0_0; }

		//SUBTRACTION='-'
		public EnumLiteralDeclaration getSUBTRACTIONEnumLiteralDeclaration_1() { return cSUBTRACTIONEnumLiteralDeclaration_1; }

		//'-'
		public Keyword getSUBTRACTIONHyphenMinusKeyword_1_0() { return cSUBTRACTIONHyphenMinusKeyword_1_0; }
	}

	public class GMultiplicationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GMultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLICATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLICATIONAsteriskKeyword_0_0 = (Keyword)cMULTIPLICATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVISIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVISIONSolidusKeyword_1_0 = (Keyword)cDIVISIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GMultiplicationOperator:
		//	MULTIPLICATION='*'
		//	| DIVISION='/';
		public EnumRule getRule() { return rule; }

		//MULTIPLICATION='*' | DIVISION='/'
		public Alternatives getAlternatives() { return cAlternatives; }

		//MULTIPLICATION='*'
		public EnumLiteralDeclaration getMULTIPLICATIONEnumLiteralDeclaration_0() { return cMULTIPLICATIONEnumLiteralDeclaration_0; }

		//'*'
		public Keyword getMULTIPLICATIONAsteriskKeyword_0_0() { return cMULTIPLICATIONAsteriskKeyword_0_0; }

		//DIVISION='/'
		public EnumLiteralDeclaration getDIVISIONEnumLiteralDeclaration_1() { return cDIVISIONEnumLiteralDeclaration_1; }

		//'/'
		public Keyword getDIVISIONSolidusKeyword_1_0() { return cDIVISIONSolidusKeyword_1_0; }
	}

	public class GNegationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNegationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEGATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEGATIONNotKeyword_0_0 = (Keyword)cNEGATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSTildeKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GNegationOperator:
		//	NEGATION='not'
		//	| MINUS='~' // TODO: fix unary negation
		//;
		public EnumRule getRule() { return rule; }

		//NEGATION='not' | MINUS='~'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NEGATION='not'
		public EnumLiteralDeclaration getNEGATIONEnumLiteralDeclaration_0() { return cNEGATIONEnumLiteralDeclaration_0; }

		//'not'
		public Keyword getNEGATIONNotKeyword_0_0() { return cNEGATIONNotKeyword_0_0; }

		//MINUS='~'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//'~'
		public Keyword getMINUSTildeKeyword_1_0() { return cMINUSTildeKeyword_1_0; }
	}
	
	private final GProgramElements pGProgram;
	private final GImportStatementElements pGImportStatement;
	private final GExpressionElements pGExpression;
	private final GOrExpressionElements pGOrExpression;
	private final GXorExpressionElements pGXorExpression;
	private final GAndExpressionElements pGAndExpression;
	private final GEqualityExpressionElements pGEqualityExpression;
	private final GRelationExpressionElements pGRelationExpression;
	private final GAdditionExpressionElements pGAdditionExpression;
	private final GMultiplicationExpressionElements pGMultiplicationExpression;
	private final GNegationExpressionElements pGNegationExpression;
	private final GNavigationExpressionElements pGNavigationExpression;
	private final GReferenceExpressionElements pGReferenceExpression;
	private final GPrimaryExpressionElements pGPrimaryExpression;
	private final GStringExpressionElements pGStringExpression;
	private final GBooleanExpressionElements pGBooleanExpression;
	private final GNumericExpressionElements pGNumericExpression;
	private final GIntegerExpressionElements pGIntegerExpression;
	private final GDoubleExpressionElements pGDoubleExpression;
	private final GEnumLiteralExpressionElements pGEnumLiteralExpression;
	private final GIfExpressionElements pGIfExpression;
	private final GBraceExpressionElements pGBraceExpression;
	private final GAndOperatorElements eGAndOperator;
	private final GXorOperatorElements eGXorOperator;
	private final GOrOperatorElements eGOrOperator;
	private final GEqualityOperatorElements eGEqualityOperator;
	private final GRelationOperatorElements eGRelationOperator;
	private final GAdditionOperatorElements eGAdditionOperator;
	private final GMultiplicationOperatorElements eGMultiplicationOperator;
	private final GNegationOperatorElements eGNegationOperator;
	private final NavigationOperatorElements pNavigationOperator;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGProgram = new GProgramElements();
		this.pGImportStatement = new GImportStatementElements();
		this.pGExpression = new GExpressionElements();
		this.pGOrExpression = new GOrExpressionElements();
		this.pGXorExpression = new GXorExpressionElements();
		this.pGAndExpression = new GAndExpressionElements();
		this.pGEqualityExpression = new GEqualityExpressionElements();
		this.pGRelationExpression = new GRelationExpressionElements();
		this.pGAdditionExpression = new GAdditionExpressionElements();
		this.pGMultiplicationExpression = new GMultiplicationExpressionElements();
		this.pGNegationExpression = new GNegationExpressionElements();
		this.pGNavigationExpression = new GNavigationExpressionElements();
		this.pGReferenceExpression = new GReferenceExpressionElements();
		this.pGPrimaryExpression = new GPrimaryExpressionElements();
		this.pGStringExpression = new GStringExpressionElements();
		this.pGBooleanExpression = new GBooleanExpressionElements();
		this.pGNumericExpression = new GNumericExpressionElements();
		this.pGIntegerExpression = new GIntegerExpressionElements();
		this.pGDoubleExpression = new GDoubleExpressionElements();
		this.pGEnumLiteralExpression = new GEnumLiteralExpressionElements();
		this.pGIfExpression = new GIfExpressionElements();
		this.pGBraceExpression = new GBraceExpressionElements();
		this.eGAndOperator = new GAndOperatorElements();
		this.eGXorOperator = new GXorOperatorElements();
		this.eGOrOperator = new GOrOperatorElements();
		this.eGEqualityOperator = new GEqualityOperatorElements();
		this.eGRelationOperator = new GRelationOperatorElements();
		this.eGAdditionOperator = new GAdditionOperatorElements();
		this.eGMultiplicationOperator = new GMultiplicationOperatorElements();
		this.eGNegationOperator = new GNegationOperatorElements();
		this.pNavigationOperator = new NavigationOperatorElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.gexpressions.xtext.GExpressions.DOUBLE");
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.gexpressions.xtext.GExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////-----------------------------------------------------------------------------
	//// Main and import in order to be able to test the language as standalone
	////-----------------------------------------------------------------------------
	//GProgram:
	//	imports+=GImportStatement* (expressions+=GExpression (';'? expressions+=GExpression)*)?;
	public GProgramElements getGProgramAccess() {
		return pGProgram;
	}
	
	public ParserRule getGProgramRule() {
		return getGProgramAccess().getRule();
	}

	//GImportStatement:
	//	'import' importURI=STRING;
	public GImportStatementElements getGImportStatementAccess() {
		return pGImportStatement;
	}
	
	public ParserRule getGImportStatementRule() {
		return getGImportStatementAccess().getRule();
	}

	//GExpression:
	//	GOrExpression;
	public GExpressionElements getGExpressionAccess() {
		return pGExpression;
	}
	
	public ParserRule getGExpressionRule() {
		return getGExpressionAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Binary and unary operators, navigation, reference, ...
	////-----------------------------------------------------------------------------
	//GOrExpression GExpression:
	//	GXorExpression ({GOrExpression.leftOperand=current} operator=GOrOperator
	//	rightOperand=GXorExpression)*
	public GOrExpressionElements getGOrExpressionAccess() {
		return pGOrExpression;
	}
	
	public ParserRule getGOrExpressionRule() {
		return getGOrExpressionAccess().getRule();
	}

	//GXorExpression GExpression:
	//	GAndExpression ({GXorExpression.leftOperand=current} operator=GXorOperator
	//	rightOperand=GAndExpression)*
	public GXorExpressionElements getGXorExpressionAccess() {
		return pGXorExpression;
	}
	
	public ParserRule getGXorExpressionRule() {
		return getGXorExpressionAccess().getRule();
	}

	//GAndExpression GExpression:
	//	GEqualityExpression ({GAndExpression.leftOperand=current} operator=GAndOperator
	//	rightOperand=GEqualityExpression)*
	public GAndExpressionElements getGAndExpressionAccess() {
		return pGAndExpression;
	}
	
	public ParserRule getGAndExpressionRule() {
		return getGAndExpressionAccess().getRule();
	}

	//GEqualityExpression GExpression:
	//	GRelationExpression ({GEqualityExpression.leftOperand=current} operator=GEqualityOperator
	//	rightOperand=GRelationExpression)*
	public GEqualityExpressionElements getGEqualityExpressionAccess() {
		return pGEqualityExpression;
	}
	
	public ParserRule getGEqualityExpressionRule() {
		return getGEqualityExpressionAccess().getRule();
	}

	//GRelationExpression GExpression:
	//	GAdditionExpression ({GRelationExpression.leftOperand=current} operator=GRelationOperator
	//	rightOperand=GAdditionExpression)*
	public GRelationExpressionElements getGRelationExpressionAccess() {
		return pGRelationExpression;
	}
	
	public ParserRule getGRelationExpressionRule() {
		return getGRelationExpressionAccess().getRule();
	}

	//GAdditionExpression GExpression:
	//	GMultiplicationExpression ({GAdditionExpression.leftOperand=current} operator=GAdditionOperator
	//	rightOperand=GMultiplicationExpression)*
	public GAdditionExpressionElements getGAdditionExpressionAccess() {
		return pGAdditionExpression;
	}
	
	public ParserRule getGAdditionExpressionRule() {
		return getGAdditionExpressionAccess().getRule();
	}

	//GMultiplicationExpression GExpression:
	//	GNegationExpression ({GMultiplicationExpression.leftOperand=current} operator=GMultiplicationOperator
	//	rightOperand=GNegationExpression)*
	public GMultiplicationExpressionElements getGMultiplicationExpressionAccess() {
		return pGMultiplicationExpression;
	}
	
	public ParserRule getGMultiplicationExpressionRule() {
		return getGMultiplicationExpressionAccess().getRule();
	}

	//GNegationExpression GExpression:
	//	GNavigationExpression
	//	| {GNegationExpression} operator=GNegationOperator operand=GNavigationExpression
	public GNegationExpressionElements getGNegationExpressionAccess() {
		return pGNegationExpression;
	}
	
	public ParserRule getGNegationExpressionRule() {
		return getGNegationExpressionAccess().getRule();
	}

	//GNavigationExpression GExpression:
	//	GReferenceExpression ({GNavigationExpression.body=current} NavigationOperator
	//	referencedEObject=[ecore::EObject])*
	public GNavigationExpressionElements getGNavigationExpressionAccess() {
		return pGNavigationExpression;
	}
	
	public ParserRule getGNavigationExpressionRule() {
		return getGNavigationExpressionAccess().getRule();
	}

	//GReferenceExpression GExpression:
	//	GPrimaryExpression
	//	| {GReferenceExpression} referencedEObject=[ecore::EObject]
	public GReferenceExpressionElements getGReferenceExpressionAccess() {
		return pGReferenceExpression;
	}
	
	public ParserRule getGReferenceExpressionRule() {
		return getGReferenceExpressionAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Primary expressions
	////-----------------------------------------------------------------------------
	//GPrimaryExpression GExpression:
	//	GStringExpression
	//	| GBooleanExpression
	//	| GNumericExpression
	//	| GEnumLiteralExpression
	//	| GIfExpression
	//	| GBraceExpression
	public GPrimaryExpressionElements getGPrimaryExpressionAccess() {
		return pGPrimaryExpression;
	}
	
	public ParserRule getGPrimaryExpressionRule() {
		return getGPrimaryExpressionAccess().getRule();
	}

	//GStringExpression GExpression:
	//	{GStringExpression} value=STRING
	public GStringExpressionElements getGStringExpressionAccess() {
		return pGStringExpression;
	}
	
	public ParserRule getGStringExpressionRule() {
		return getGStringExpressionAccess().getRule();
	}

	//GBooleanExpression GExpression:
	//	{GBooleanExpression} value=BOOLEAN
	public GBooleanExpressionElements getGBooleanExpressionAccess() {
		return pGBooleanExpression;
	}
	
	public ParserRule getGBooleanExpressionRule() {
		return getGBooleanExpressionAccess().getRule();
	}

	//GNumericExpression GExpression:
	//	GIntegerExpression
	//	| GDoubleExpression
	public GNumericExpressionElements getGNumericExpressionAccess() {
		return pGNumericExpression;
	}
	
	public ParserRule getGNumericExpressionRule() {
		return getGNumericExpressionAccess().getRule();
	}

	//GIntegerExpression GExpression:
	//	{GIntegerExpression} value=INT
	public GIntegerExpressionElements getGIntegerExpressionAccess() {
		return pGIntegerExpression;
	}
	
	public ParserRule getGIntegerExpressionRule() {
		return getGIntegerExpressionAccess().getRule();
	}

	//GDoubleExpression GExpression:
	//	{GDoubleExpression} value=DOUBLE
	public GDoubleExpressionElements getGDoubleExpressionAccess() {
		return pGDoubleExpression;
	}
	
	public ParserRule getGDoubleExpressionRule() {
		return getGDoubleExpressionAccess().getRule();
	}

	//GEnumLiteralExpression GExpression:
	//	{GEnumLiteralExpression}
	//	'#' value=[ecore::EEnumLiteral|QualifiedName]
	public GEnumLiteralExpressionElements getGEnumLiteralExpressionAccess() {
		return pGEnumLiteralExpression;
	}
	
	public ParserRule getGEnumLiteralExpressionRule() {
		return getGEnumLiteralExpressionAccess().getRule();
	}

	//GIfExpression GExpression:
	//	{GIfExpression}
	//	'if' condition=GExpression
	//	'then' thenExpression=GExpression
	//	'else' elseExpression=GExpression
	//	'endif'
	public GIfExpressionElements getGIfExpressionAccess() {
		return pGIfExpression;
	}
	
	public ParserRule getGIfExpressionRule() {
		return getGIfExpressionAccess().getRule();
	}

	//GBraceExpression GExpression:
	//	{GBraceExpression}
	//	'('
	//	innerExpression=GExpression
	//	')'
	public GBraceExpressionElements getGBraceExpressionAccess() {
		return pGBraceExpression;
	}
	
	public ParserRule getGBraceExpressionRule() {
		return getGBraceExpressionAccess().getRule();
	}

	//enum GAndOperator:
	//	AND='and';
	public GAndOperatorElements getGAndOperatorAccess() {
		return eGAndOperator;
	}
	
	public EnumRule getGAndOperatorRule() {
		return getGAndOperatorAccess().getRule();
	}

	//enum GXorOperator:
	//	XOR='xor';
	public GXorOperatorElements getGXorOperatorAccess() {
		return eGXorOperator;
	}
	
	public EnumRule getGXorOperatorRule() {
		return getGXorOperatorAccess().getRule();
	}

	//enum GOrOperator:
	//	OR='or';
	public GOrOperatorElements getGOrOperatorAccess() {
		return eGOrOperator;
	}
	
	public EnumRule getGOrOperatorRule() {
		return getGOrOperatorAccess().getRule();
	}

	//enum GEqualityOperator:
	//	EQUAL='='
	//	| NOTEQUAL='<>';
	public GEqualityOperatorElements getGEqualityOperatorAccess() {
		return eGEqualityOperator;
	}
	
	public EnumRule getGEqualityOperatorRule() {
		return getGEqualityOperatorAccess().getRule();
	}

	//enum GRelationOperator:
	//	LESS='<'
	//	| GREATER='>'
	//	| LESSEQUAL='<='
	//	| GREATEREQUAL='>=';
	public GRelationOperatorElements getGRelationOperatorAccess() {
		return eGRelationOperator;
	}
	
	public EnumRule getGRelationOperatorRule() {
		return getGRelationOperatorAccess().getRule();
	}

	//enum GAdditionOperator:
	//	ADDITION='+'
	//	| SUBTRACTION='-';
	public GAdditionOperatorElements getGAdditionOperatorAccess() {
		return eGAdditionOperator;
	}
	
	public EnumRule getGAdditionOperatorRule() {
		return getGAdditionOperatorAccess().getRule();
	}

	//enum GMultiplicationOperator:
	//	MULTIPLICATION='*'
	//	| DIVISION='/';
	public GMultiplicationOperatorElements getGMultiplicationOperatorAccess() {
		return eGMultiplicationOperator;
	}
	
	public EnumRule getGMultiplicationOperatorRule() {
		return getGMultiplicationOperatorAccess().getRule();
	}

	//enum GNegationOperator:
	//	NEGATION='not'
	//	| MINUS='~' // TODO: fix unary negation
	//;
	public GNegationOperatorElements getGNegationOperatorAccess() {
		return eGNegationOperator;
	}
	
	public EnumRule getGNegationOperatorRule() {
		return getGNegationOperatorAccess().getRule();
	}

	////-----------------------------------------------------------------------------
	//// Additional terminals
	////-----------------------------------------------------------------------------
	//NavigationOperator:
	//	'.'
	//	| '->';
	public NavigationOperatorElements getNavigationOperatorAccess() {
		return pNavigationOperator;
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true'
	//	| 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal DOUBLE returns ecore::EDouble:
	//	('-' | '+')? (INT '.' INT | '.' INT | INT '.') ('e' ('-' | '+') INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	//QualifiedName:
	//	ID (=> '.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
