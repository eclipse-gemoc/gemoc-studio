/*
 * generated by Xtext
 */
grammar InternalGExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.gemoc.gexpressions.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gemoc.gexpressions.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gemoc.gexpressions.xtext.services.GExpressionsGrammarAccess;

}

@parser::members {

 	private GExpressionsGrammarAccess grammarAccess;
 	
    public InternalGExpressionsParser(TokenStream input, GExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GProgram";	
   	}
   	
   	@Override
   	protected GExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGProgram
entryRuleGProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGProgramRule()); }
	 iv_ruleGProgram=ruleGProgram 
	 { $current=$iv_ruleGProgram.current; } 
	 EOF 
;

// Rule GProgram
ruleGProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGProgramAccess().getImportsGImportStatementParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleGImportStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGProgramRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GImportStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getGProgramAccess().getExpressionsGExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGProgramRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGProgramAccess().getSemicolonKeyword_1_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGProgramAccess().getExpressionsGExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_expressions_3_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGProgramRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleGImportStatement
entryRuleGImportStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGImportStatementRule()); }
	 iv_ruleGImportStatement=ruleGImportStatement 
	 { $current=$iv_ruleGImportStatement.current; } 
	 EOF 
;

// Rule GImportStatement
ruleGImportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGImportStatementAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getGImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGImportStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleGExpression
entryRuleGExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGExpressionRule()); }
	 iv_ruleGExpression=ruleGExpression 
	 { $current=$iv_ruleGExpression.current; } 
	 EOF 
;

// Rule GExpression
ruleGExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGExpressionAccess().getGOrExpressionParserRuleCall()); 
    }
    this_GOrExpression_0=ruleGOrExpression
    { 
        $current = $this_GOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleGOrExpression
entryRuleGOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGOrExpressionRule()); }
	 iv_ruleGOrExpression=ruleGOrExpression 
	 { $current=$iv_ruleGOrExpression.current; } 
	 EOF 
;

// Rule GOrExpression
ruleGOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGOrExpressionAccess().getGXorExpressionParserRuleCall_0()); 
    }
    this_GXorExpression_0=ruleGXorExpression
    { 
        $current = $this_GXorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGOrExpressionAccess().getGOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGOrExpressionAccess().getOperatorGOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGOrExpressionAccess().getRightOperandGXorExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGXorExpression
entryRuleGXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGXorExpressionRule()); }
	 iv_ruleGXorExpression=ruleGXorExpression 
	 { $current=$iv_ruleGXorExpression.current; } 
	 EOF 
;

// Rule GXorExpression
ruleGXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGXorExpressionAccess().getGAndExpressionParserRuleCall_0()); 
    }
    this_GAndExpression_0=ruleGAndExpression
    { 
        $current = $this_GAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGXorExpressionAccess().getGXorExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGXorExpressionAccess().getOperatorGXorOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGXorOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGXorExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GXorOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGXorExpressionAccess().getRightOperandGAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGXorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGAndExpression
entryRuleGAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGAndExpressionRule()); }
	 iv_ruleGAndExpression=ruleGAndExpression 
	 { $current=$iv_ruleGAndExpression.current; } 
	 EOF 
;

// Rule GAndExpression
ruleGAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGAndExpressionAccess().getGEqualityExpressionParserRuleCall_0()); 
    }
    this_GEqualityExpression_0=ruleGEqualityExpression
    { 
        $current = $this_GEqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGAndExpressionAccess().getGAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAndExpressionAccess().getOperatorGAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAndExpressionAccess().getRightOperandGEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGEqualityExpression
entryRuleGEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGEqualityExpressionRule()); }
	 iv_ruleGEqualityExpression=ruleGEqualityExpression 
	 { $current=$iv_ruleGEqualityExpression.current; } 
	 EOF 
;

// Rule GEqualityExpression
ruleGEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getGRelationExpressionParserRuleCall_0()); 
    }
    this_GRelationExpression_0=ruleGRelationExpression
    { 
        $current = $this_GRelationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGEqualityExpressionAccess().getGEqualityExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getOperatorGEqualityOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GEqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGEqualityExpressionAccess().getRightOperandGRelationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGRelationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GRelationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGRelationExpression
entryRuleGRelationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGRelationExpressionRule()); }
	 iv_ruleGRelationExpression=ruleGRelationExpression 
	 { $current=$iv_ruleGRelationExpression.current; } 
	 EOF 
;

// Rule GRelationExpression
ruleGRelationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getGAdditionExpressionParserRuleCall_0()); 
    }
    this_GAdditionExpression_0=ruleGAdditionExpression
    { 
        $current = $this_GAdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGRelationExpressionAccess().getGRelationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getOperatorGRelationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGRelationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GRelationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGRelationExpressionAccess().getRightOperandGAdditionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGAdditionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAdditionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGAdditionExpression
entryRuleGAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGAdditionExpressionRule()); }
	 iv_ruleGAdditionExpression=ruleGAdditionExpression 
	 { $current=$iv_ruleGAdditionExpression.current; } 
	 EOF 
;

// Rule GAdditionExpression
ruleGAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getGMultiplicationExpressionParserRuleCall_0()); 
    }
    this_GMultiplicationExpression_0=ruleGMultiplicationExpression
    { 
        $current = $this_GMultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGAdditionExpressionAccess().getGAdditionExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getOperatorGAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GAdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGAdditionExpressionAccess().getRightOperandGMultiplicationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGMultiplicationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GMultiplicationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGMultiplicationExpression
entryRuleGMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGMultiplicationExpressionRule()); }
	 iv_ruleGMultiplicationExpression=ruleGMultiplicationExpression 
	 { $current=$iv_ruleGMultiplicationExpression.current; } 
	 EOF 
;

// Rule GMultiplicationExpression
ruleGMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getGNegationExpressionParserRuleCall_0()); 
    }
    this_GNegationExpression_0=ruleGNegationExpression
    { 
        $current = $this_GNegationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGMultiplicationExpressionAccess().getGMultiplicationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getOperatorGMultiplicationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GMultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGMultiplicationExpressionAccess().getRightOperandGNegationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleGNegationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNegationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGNegationExpression
entryRuleGNegationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNegationExpressionRule()); }
	 iv_ruleGNegationExpression=ruleGNegationExpression 
	 { $current=$iv_ruleGNegationExpression.current; } 
	 EOF 
;

// Rule GNegationExpression
ruleGNegationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getGNavigationExpressionParserRuleCall_0()); 
    }
    this_GNavigationExpression_0=ruleGNavigationExpression
    { 
        $current = $this_GNavigationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGNegationExpressionAccess().getGNegationExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getOperatorGNegationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleGNegationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNegationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGNegationExpressionAccess().getOperandGNavigationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=ruleGNavigationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GNavigationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleGNavigationExpression
entryRuleGNavigationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNavigationExpressionRule()); }
	 iv_ruleGNavigationExpression=ruleGNavigationExpression 
	 { $current=$iv_ruleGNavigationExpression.current; } 
	 EOF 
;

// Rule GNavigationExpression
ruleGNavigationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNavigationExpressionAccess().getGReferenceExpressionParserRuleCall_0()); 
    }
    this_GReferenceExpression_0=ruleGReferenceExpression
    { 
        $current = $this_GReferenceExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGNavigationExpressionAccess().getGNavigationExpressionBodyAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getGNavigationExpressionAccess().getNavigationOperatorParserRuleCall_1_1()); 
    }
ruleNavigationOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGNavigationExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getGNavigationExpressionAccess().getReferencedEObjectEObjectCrossReference_1_2_0()); 
	}

)
))*)
;





// Entry rule entryRuleGReferenceExpression
entryRuleGReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGReferenceExpressionRule()); }
	 iv_ruleGReferenceExpression=ruleGReferenceExpression 
	 { $current=$iv_ruleGReferenceExpression.current; } 
	 EOF 
;

// Rule GReferenceExpression
ruleGReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGReferenceExpressionAccess().getGPrimaryExpressionParserRuleCall_0()); 
    }
    this_GPrimaryExpression_0=ruleGPrimaryExpression
    { 
        $current = $this_GPrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGReferenceExpressionAccess().getGReferenceExpressionAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGReferenceExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGReferenceExpressionAccess().getReferencedEObjectEObjectCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleGPrimaryExpression
entryRuleGPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGPrimaryExpressionRule()); }
	 iv_ruleGPrimaryExpression=ruleGPrimaryExpression 
	 { $current=$iv_ruleGPrimaryExpression.current; } 
	 EOF 
;

// Rule GPrimaryExpression
ruleGPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGStringExpressionParserRuleCall_0()); 
    }
    this_GStringExpression_0=ruleGStringExpression
    { 
        $current = $this_GStringExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGBooleanExpressionParserRuleCall_1()); 
    }
    this_GBooleanExpression_1=ruleGBooleanExpression
    { 
        $current = $this_GBooleanExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGNumericExpressionParserRuleCall_2()); 
    }
    this_GNumericExpression_2=ruleGNumericExpression
    { 
        $current = $this_GNumericExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGEnumLiteralExpressionParserRuleCall_3()); 
    }
    this_GEnumLiteralExpression_3=ruleGEnumLiteralExpression
    { 
        $current = $this_GEnumLiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGIfExpressionParserRuleCall_4()); 
    }
    this_GIfExpression_4=ruleGIfExpression
    { 
        $current = $this_GIfExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGPrimaryExpressionAccess().getGBraceExpressionParserRuleCall_5()); 
    }
    this_GBraceExpression_5=ruleGBraceExpression
    { 
        $current = $this_GBraceExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGStringExpression
entryRuleGStringExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGStringExpressionRule()); }
	 iv_ruleGStringExpression=ruleGStringExpression 
	 { $current=$iv_ruleGStringExpression.current; } 
	 EOF 
;

// Rule GStringExpression
ruleGStringExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGStringExpressionAccess().getGStringExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGStringExpressionAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGStringExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleGBooleanExpression
entryRuleGBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGBooleanExpressionRule()); }
	 iv_ruleGBooleanExpression=ruleGBooleanExpression 
	 { $current=$iv_ruleGBooleanExpression.current; } 
	 EOF 
;

// Rule GBooleanExpression
ruleGBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGBooleanExpressionAccess().getGBooleanExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGBooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGBooleanExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.BOOLEAN");
	    }

)
))
;





// Entry rule entryRuleGNumericExpression
entryRuleGNumericExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGNumericExpressionRule()); }
	 iv_ruleGNumericExpression=ruleGNumericExpression 
	 { $current=$iv_ruleGNumericExpression.current; } 
	 EOF 
;

// Rule GNumericExpression
ruleGNumericExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGNumericExpressionAccess().getGIntegerExpressionParserRuleCall_0()); 
    }
    this_GIntegerExpression_0=ruleGIntegerExpression
    { 
        $current = $this_GIntegerExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGNumericExpressionAccess().getGDoubleExpressionParserRuleCall_1()); 
    }
    this_GDoubleExpression_1=ruleGDoubleExpression
    { 
        $current = $this_GDoubleExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGIntegerExpression
entryRuleGIntegerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGIntegerExpressionRule()); }
	 iv_ruleGIntegerExpression=ruleGIntegerExpression 
	 { $current=$iv_ruleGIntegerExpression.current; } 
	 EOF 
;

// Rule GIntegerExpression
ruleGIntegerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGIntegerExpressionAccess().getGIntegerExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGIntegerExpressionAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGIntegerExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))
;





// Entry rule entryRuleGDoubleExpression
entryRuleGDoubleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDoubleExpressionRule()); }
	 iv_ruleGDoubleExpression=ruleGDoubleExpression 
	 { $current=$iv_ruleGDoubleExpression.current; } 
	 EOF 
;

// Rule GDoubleExpression
ruleGDoubleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGDoubleExpressionAccess().getGDoubleExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGDoubleExpressionAccess().getValueDOUBLETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDoubleExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.DOUBLE");
	    }

)
))
;





// Entry rule entryRuleGEnumLiteralExpression
entryRuleGEnumLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGEnumLiteralExpressionRule()); }
	 iv_ruleGEnumLiteralExpression=ruleGEnumLiteralExpression 
	 { $current=$iv_ruleGEnumLiteralExpression.current; } 
	 EOF 
;

// Rule GEnumLiteralExpression
ruleGEnumLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGEnumLiteralExpressionAccess().getGEnumLiteralExpressionAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGEnumLiteralExpressionAccess().getNumberSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGEnumLiteralExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getGEnumLiteralExpressionAccess().getValueEEnumLiteralCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGIfExpression
entryRuleGIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGIfExpressionRule()); }
	 iv_ruleGIfExpression=ruleGIfExpression 
	 { $current=$iv_ruleGIfExpression.current; } 
	 EOF 
;

// Rule GIfExpression
ruleGIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGIfExpressionAccess().getGIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGIfExpressionAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getConditionGExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGIfExpressionAccess().getThenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getThenExpressionGExpressionParserRuleCall_4_0()); 
	    }
		lv_thenExpression_4_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"thenExpression",
        		lv_thenExpression_4_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGIfExpressionAccess().getElseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGIfExpressionAccess().getElseExpressionGExpressionParserRuleCall_6_0()); 
	    }
		lv_elseExpression_6_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_6_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='endif' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGIfExpressionAccess().getEndifKeyword_7());
    }
)
;





// Entry rule entryRuleGBraceExpression
entryRuleGBraceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGBraceExpressionRule()); }
	 iv_ruleGBraceExpression=ruleGBraceExpression 
	 { $current=$iv_ruleGBraceExpression.current; } 
	 EOF 
;

// Rule GBraceExpression
ruleGBraceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGBraceExpressionAccess().getGBraceExpressionAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGBraceExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGBraceExpressionAccess().getInnerExpressionGExpressionParserRuleCall_2_0()); 
	    }
		lv_innerExpression_2_0=ruleGExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGBraceExpressionRule());
	        }
       		set(
       			$current, 
       			"innerExpression",
        		lv_innerExpression_2_0, 
        		"org.eclipse.gemoc.gexpressions.xtext.GExpressions.GExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGBraceExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNavigationOperatorRule()); } 
	 iv_ruleNavigationOperator=ruleNavigationOperator 
	 { $current=$iv_ruleNavigationOperator.current.getText(); }  
	 EOF 
;

// Rule NavigationOperator
ruleNavigationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getFullStopKeyword_0()); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule GAndOperator
ruleGAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getGAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule GXorOperator
ruleGXorOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='xor' 
	{
        $current = grammarAccess.getGXorOperatorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGXorOperatorAccess().getXOREnumLiteralDeclaration()); 
    }
);



// Rule GOrOperator
ruleGOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getGOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule GEqualityOperator
ruleGEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getGEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGEqualityOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getGEqualityOperatorAccess().getNOTEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGEqualityOperatorAccess().getNOTEQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule GRelationOperator
ruleGRelationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGRelationOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGRelationOperatorAccess().getGREATEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getLESSEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGRelationOperatorAccess().getLESSEQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getGRelationOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGRelationOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3()); 
    }
));



// Rule GAdditionOperator
ruleGAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getGAdditionOperatorAccess().getADDITIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGAdditionOperatorAccess().getADDITIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getGAdditionOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGAdditionOperatorAccess().getSUBTRACTIONEnumLiteralDeclaration_1()); 
    }
));



// Rule GMultiplicationOperator
ruleGMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getGMultiplicationOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGMultiplicationOperatorAccess().getMULTIPLICATIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getGMultiplicationOperatorAccess().getDIVISIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGMultiplicationOperatorAccess().getDIVISIONEnumLiteralDeclaration_1()); 
    }
));



// Rule GNegationOperator
ruleGNegationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getGNegationOperatorAccess().getNEGATIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGNegationOperatorAccess().getNEGATIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='~' 
	{
        $current = grammarAccess.getGNegationOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGNegationOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : ('-'|'+')? (RULE_INT '.' RULE_INT|'.' RULE_INT|RULE_INT '.') ('e' ('-'|'+') RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


