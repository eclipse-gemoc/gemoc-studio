/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.gemoc.formatting2

import com.google.inject.Inject
import org.eclipse.gemoc.dsl.CompositeValue
import org.eclipse.gemoc.dsl.Dsl
import org.eclipse.gemoc.dsl.Value
import org.eclipse.gemoc.services.DslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.gemoc.dsl.DisplayName
import org.eclipse.gemoc.dsl.SimpleValue
import org.eclipse.gemoc.dsl.DslPackage
import org.eclipse.gemoc.dsl.AbstractSyntax
import org.eclipse.gemoc.dsl.Semantic
import org.eclipse.gemoc.dsl.Metaprog

class DslFormatter extends AbstractFormatter2 {
	
	@Inject extension DslGrammarAccess

	def dispatch void format(Dsl dsl, extension IFormattableDocument document) {
		
		dsl.regionFor.feature(DslPackage.eINSTANCE.getDsl_Name).surround[oneSpace]
		
		val open = dsl.regionFor.keyword("{")
		val close = dsl.regionFor.keyword("}")
		open.append[newLine]
		close.append[newLine]
		interior(open, close)[indent]
		
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		dsl.getDisplayName.format;
		dsl.getMetaprog.format;
		dsl.getAbstractSyntax.format;
		dsl.getSemantic.format;
		for (Value values : dsl.getValues()) {
			values.format;
		}
	}

	def dispatch void format(CompositeValue compositeValue, extension IFormattableDocument document) {
		compositeValue.regionFor.feature(DslPackage.eINSTANCE.value_Name).surround[oneSpace]
		
		val open = compositeValue.regionFor.keyword("{")
		val close = compositeValue.regionFor.keyword("}")
		open.append[newLine]
		close.append[newLine]
		interior(open, close)[indent]
		
		for (Value values : compositeValue.getValues()) {
			values.format;
		}
	}
	
	def dispatch void format(SimpleValue simpleValue, extension IFormattableDocument document) {
		simpleValue.name.format
		
		simpleValue.regionFor.keyword("=").surround[oneSpace]
		
		for (comma : simpleValue.regionFor.keywords(","))
			comma.prepend[noSpace].append[newLine]
			
		for(String value : simpleValue.values)
			value.format
		
		simpleValue.regionFor.features(DslPackage.eINSTANCE.simpleValue_Values).last.append[newLine]
	}
	
	def dispatch void format(AbstractSyntax abstractSyntax, extension IFormattableDocument document) {
		abstractSyntax.regionFor.keyword("abstract-syntax").append[oneSpace]
		
		val open = abstractSyntax.regionFor.keyword("{")
		val close = abstractSyntax.regionFor.keyword("}")
		open.append[newLine]
		close.append[newLine]
		interior(open, close)[indent]
		
		for (Value values : abstractSyntax.getValues()) {
			values.format;
		}
	}
	
	def dispatch void format(Semantic semantic, extension IFormattableDocument document) {
		semantic.regionFor.keyword("semantic").append[oneSpace]
		
		val open = semantic.regionFor.keyword("{")
		val close = semantic.regionFor.keyword("}")
		open.append[newLine]
		close.append[newLine]
		interior(open, close)[indent]
		
		for (Value values : semantic.getValues()) {
			values.format;
		}
	}
	
	def dispatch void format(DisplayName displayName, extension IFormattableDocument document) {
		displayName.regionFor.keyword("=").surround[oneSpace]
		displayName.regionFor.feature(DslPackage.eINSTANCE.displayName_Value).append[newLine]
	}
	
	def dispatch void format(Metaprog metaprog, extension IFormattableDocument document) {
		metaprog.regionFor.keyword("=").surround[oneSpace]
		metaprog.regionFor.feature(DslPackage.eINSTANCE.displayName_Value).append[newLine]
	}
	
}
