/*
 * generated by Xtext 2.12.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.gemoc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gemoc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gemoc.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Dsl";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDsl
entryRuleDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDslRule()); }
	iv_ruleDsl=ruleDsl
	{ $current=$iv_ruleDsl.current; }
	EOF;

// Rule Dsl
ruleDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DSL'
		{
			newLeafNode(otherlv_0, grammarAccess.getDslAccess().getDSLKeyword_0());
		}
		(
			(
				(
					lv_name_1_1=RULE_QUALIFIED
					{
						newLeafNode(lv_name_1_1, grammarAccess.getDslAccess().getNameQUALIFIEDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDslRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"org.eclipse.gemoc.Dsl.QUALIFIED");
					}
					    |
					lv_name_1_2=RULE_ID
					{
						newLeafNode(lv_name_1_2, grammarAccess.getDslAccess().getNameIDTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDslRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_2,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDslAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getDisplayNameDisplayNameParserRuleCall_3_0());
				}
				lv_displayName_3_0=ruleDisplayName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					set(
						$current,
						"displayName",
						lv_displayName_3_0,
						"org.eclipse.gemoc.Dsl.DisplayName");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getMetaprogMetaprogParserRuleCall_4_0());
				}
				lv_metaprog_4_0=ruleMetaprog
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					set(
						$current,
						"metaprog",
						lv_metaprog_4_0,
						"org.eclipse.gemoc.Dsl.Metaprog");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getAbstractSyntaxAbstractSyntaxParserRuleCall_5_0());
				}
				lv_abstractSyntax_5_0=ruleAbstractSyntax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					set(
						$current,
						"abstractSyntax",
						lv_abstractSyntax_5_0,
						"org.eclipse.gemoc.Dsl.AbstractSyntax");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getSemanticSemanticParserRuleCall_6_0());
				}
				lv_semantic_6_0=ruleSemantic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					set(
						$current,
						"semantic",
						lv_semantic_6_0,
						"org.eclipse.gemoc.Dsl.Semantic");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getValuesValueParserRuleCall_7_0());
				}
				lv_values_7_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					add(
						$current,
						"values",
						lv_values_7_0,
						"org.eclipse.gemoc.Dsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getDslAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getSimpleValueParserRuleCall_0());
		}
		this_SimpleValue_0=ruleSimpleValue
		{
			$current = $this_SimpleValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getCompositeValueParserRuleCall_1());
		}
		this_CompositeValue_1=ruleCompositeValue
		{
			$current = $this_CompositeValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleValue
entryRuleSimpleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleValueRule()); }
	iv_ruleSimpleValue=ruleSimpleValue
	{ $current=$iv_ruleSimpleValue.current; }
	EOF;

// Rule SimpleValue
ruleSimpleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSimpleValueAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleValueAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_values_2_0=RULE_STRING
				{
					newLeafNode(lv_values_2_0, grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleValueRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getSimpleValueAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_values_4_0=RULE_STRING
					{
						newLeafNode(lv_values_4_0, grammarAccess.getSimpleValueAccess().getValuesSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleValueRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompositeValue
entryRuleCompositeValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeValueRule()); }
	iv_ruleCompositeValue=ruleCompositeValue
	{ $current=$iv_ruleCompositeValue.current; }
	EOF;

// Rule CompositeValue
ruleCompositeValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCompositeValueAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositeValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCompositeValueAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeValueAccess().getValuesValueParserRuleCall_2_0());
				}
				lv_values_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeValueRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"org.eclipse.gemoc.Dsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositeValueAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleDisplayName
entryRuleDisplayName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisplayNameRule()); }
	iv_ruleDisplayName=ruleDisplayName
	{ $current=$iv_ruleDisplayName.current; }
	EOF;

// Rule DisplayName
ruleDisplayName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDisplayNameAccess().getDisplayNameAction_0(),
					$current);
			}
		)
		otherlv_1='displayName'
		{
			newLeafNode(otherlv_1, grammarAccess.getDisplayNameAccess().getDisplayNameKeyword_1());
		}
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getDisplayNameAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getDisplayNameAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDisplayNameRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleMetaprog
entryRuleMetaprog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMetaprogRule()); }
	iv_ruleMetaprog=ruleMetaprog
	{ $current=$iv_ruleMetaprog.current; }
	EOF;

// Rule Metaprog
ruleMetaprog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMetaprogAccess().getMetaprogAction_0(),
					$current);
			}
		)
		otherlv_1='metaprog'
		{
			newLeafNode(otherlv_1, grammarAccess.getMetaprogAccess().getMetaprogKeyword_1());
		}
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getMetaprogAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getMetaprogAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMetaprogRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractSyntax
entryRuleAbstractSyntax returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractSyntaxRule()); }
	iv_ruleAbstractSyntax=ruleAbstractSyntax
	{ $current=$iv_ruleAbstractSyntax.current; }
	EOF;

// Rule AbstractSyntax
ruleAbstractSyntax returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxAction_0(),
					$current);
			}
		)
		otherlv_1='abstract-syntax'
		{
			newLeafNode(otherlv_1, grammarAccess.getAbstractSyntaxAccess().getAbstractSyntaxKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAbstractSyntaxAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractSyntaxAccess().getValuesValueParserRuleCall_3_0());
				}
				lv_values_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractSyntaxRule());
					}
					add(
						$current,
						"values",
						lv_values_3_0,
						"org.eclipse.gemoc.Dsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAbstractSyntaxAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSemantic
entryRuleSemantic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemanticRule()); }
	iv_ruleSemantic=ruleSemantic
	{ $current=$iv_ruleSemantic.current; }
	EOF;

// Rule Semantic
ruleSemantic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSemanticAccess().getSemanticAction_0(),
					$current);
			}
		)
		otherlv_1='semantics'
		{
			newLeafNode(otherlv_1, grammarAccess.getSemanticAccess().getSemanticsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSemanticAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSemanticAccess().getValuesValueParserRuleCall_3_0());
				}
				lv_values_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSemanticRule());
					}
					add(
						$current,
						"values",
						lv_values_3_0,
						"org.eclipse.gemoc.Dsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSemanticAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

RULE_QUALIFIED : RULE_ID '.' RULE_ID ('.' RULE_ID)*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
