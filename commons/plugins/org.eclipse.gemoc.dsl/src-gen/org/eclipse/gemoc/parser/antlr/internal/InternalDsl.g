/*
 * generated by Xtext 2.12.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.gemoc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gemoc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gemoc.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Dsl";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDsl
entryRuleDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDslRule()); }
	iv_ruleDsl=ruleDsl
	{ $current=$iv_ruleDsl.current; }
	EOF;

// Rule Dsl
ruleDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDslAccess().getDslAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDslAccess().getEntriesEntryParserRuleCall_1_0_0_0());
						}
						lv_entries_1_0=ruleEntry
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDslRule());
							}
							add(
								$current,
								"entries",
								lv_entries_1_0,
								"org.eclipse.gemoc.Dsl.Entry");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(ruleEMPTY_LINE)=>
					{
						newCompositeNode(grammarAccess.getDslAccess().getEMPTY_LINEParserRuleCall_1_0_1());
					}
					ruleEMPTY_LINE
					{
						afterParserOrEnumRuleCall();
					}
				)
				    |
				this_SL_COMMENT_3=RULE_SL_COMMENT
				{
					newLeafNode(this_SL_COMMENT_3, grammarAccess.getDslAccess().getSL_COMMENTTerminalRuleCall_1_0_2());
				}
			)
			(
				(
					otherlv_4='\r'
					{
						newLeafNode(otherlv_4, grammarAccess.getDslAccess().getCarriageReturnKeyword_1_1_0());
					}
				)?
				otherlv_5='\n'
				{
					newLeafNode(otherlv_5, grammarAccess.getDslAccess().getLineFeedKeyword_1_1_1());
				}
			)*
		)*
	)
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_WS_0=RULE_WS
			{
				newLeafNode(this_WS_0, grammarAccess.getEntryAccess().getWSTerminalRuleCall_0());
			}
		)*
		(
			(
				lv_key_1_0=RULE_ENTRYKEY
				{
					newLeafNode(lv_key_1_0, grammarAccess.getEntryAccess().getKeyENTRYKEYTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntryRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_1_0,
						"org.eclipse.gemoc.Dsl.ENTRYKEY");
				}
			)
		)
		(
			this_WS_2=RULE_WS
			{
				newLeafNode(this_WS_2, grammarAccess.getEntryAccess().getWSTerminalRuleCall_2());
			}
		)*
		this_SEPARATOR_3=RULE_SEPARATOR
		{
			newLeafNode(this_SEPARATOR_3, grammarAccess.getEntryAccess().getSEPARATORTerminalRuleCall_3());
		}
		(
			this_WS_4=RULE_WS
			{
				newLeafNode(this_WS_4, grammarAccess.getEntryAccess().getWSTerminalRuleCall_4());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryAccess().getValueEntryValueParserRuleCall_5_0());
				}
				lv_value_5_0=ruleEntryValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.eclipse.gemoc.Dsl.EntryValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntryValue
entryRuleEntryValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryValueRule()); }
	iv_ruleEntryValue=ruleEntryValue
	{ $current=$iv_ruleEntryValue.current; }
	EOF;

// Rule EntryValue
ruleEntryValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEntryValueAccess().getEntryValueAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryValueAccess().getEntryLinesENTRYVALUE_LINEParserRuleCall_1_0());
				}
				lv_entryLines_1_0=ruleENTRYVALUE_LINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryValueRule());
					}
					add(
						$current,
						"entryLines",
						lv_entryLines_1_0,
						"org.eclipse.gemoc.Dsl.ENTRYVALUE_LINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				this_WS_2=RULE_WS
				{
					newLeafNode(this_WS_2, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_0());
				}
			)*
			(
				(
					(
						((
							','
							(
								RULE_WS
							)*
							'\\'
							RULE_LINE_START
						)
						)=>
						(
							otherlv_3=','
							{
								newLeafNode(otherlv_3, grammarAccess.getEntryValueAccess().getCommaKeyword_2_1_0_0_0_0());
							}
							(
								this_WS_4=RULE_WS
								{
									newLeafNode(this_WS_4, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_1_0_0_0_1());
								}
							)*
							otherlv_5='\\'
							{
								newLeafNode(otherlv_5, grammarAccess.getEntryValueAccess().getBackslashKeyword_2_1_0_0_0_2());
							}
							this_LINE_START_6=RULE_LINE_START
							{
								newLeafNode(this_LINE_START_6, grammarAccess.getEntryValueAccess().getLINE_STARTTerminalRuleCall_2_1_0_0_0_3());
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getEntryValueAccess().getEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_0_1_0());
							}
							lv_entryLines_7_0=ruleENTRYVALUE_LINE
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEntryValueRule());
								}
								add(
									$current,
									"entryLines",
									lv_entryLines_7_0,
									"org.eclipse.gemoc.Dsl.ENTRYVALUE_LINE");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getEntryValueAccess().getCommaKeyword_2_1_1_0());
					}
					(
						this_WS_9=RULE_WS
						{
							newLeafNode(this_WS_9, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_1_1_1());
						}
					)*
					(
						(
							{
								newCompositeNode(grammarAccess.getEntryValueAccess().getEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_1_2_0());
							}
							lv_entryLines_10_0=ruleENTRYVALUE_LINE
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEntryValueRule());
								}
								add(
									$current,
									"entryLines",
									lv_entryLines_10_0,
									"org.eclipse.gemoc.Dsl.ENTRYVALUE_LINE");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleENTRYVALUE_LINE
entryRuleENTRYVALUE_LINE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getENTRYVALUE_LINERule()); }
	iv_ruleENTRYVALUE_LINE=ruleENTRYVALUE_LINE
	{ $current=$iv_ruleENTRYVALUE_LINE.current.getText(); }
	EOF;

// Rule ENTRYVALUE_LINE
ruleENTRYVALUE_LINE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				this_SPECIAL_CHAR_0=RULE_SPECIAL_CHAR
				{
					$current.merge(this_SPECIAL_CHAR_0);
				}
				{
					newLeafNode(this_SPECIAL_CHAR_0, grammarAccess.getENTRYVALUE_LINEAccess().getSPECIAL_CHARTerminalRuleCall_0_0());
				}
			)+
			(
				(
					(
						this_WS_1=RULE_WS
						{
							$current.merge(this_WS_1);
						}
						{
							newLeafNode(this_WS_1, grammarAccess.getENTRYVALUE_LINEAccess().getWSTerminalRuleCall_0_1_0_0());
						}
					)+
					(
						this_SPECIAL_CHAR_2=RULE_SPECIAL_CHAR
						{
							$current.merge(this_SPECIAL_CHAR_2);
						}
						{
							newLeafNode(this_SPECIAL_CHAR_2, grammarAccess.getENTRYVALUE_LINEAccess().getSPECIAL_CHARTerminalRuleCall_0_1_0_1());
						}
					)+
				)
				    |
				(
					this_WS_3=RULE_WS
					{
						$current.merge(this_WS_3);
					}
					{
						newLeafNode(this_WS_3, grammarAccess.getENTRYVALUE_LINEAccess().getWSTerminalRuleCall_0_1_1());
					}
				)*
			)
		)?
		(
			this_ENTRYKEY_4=RULE_ENTRYKEY
			{
				$current.merge(this_ENTRYKEY_4);
			}
			{
				newLeafNode(this_ENTRYKEY_4, grammarAccess.getENTRYVALUE_LINEAccess().getENTRYKEYTerminalRuleCall_1_0());
			}
			    |
			this_STRING_5=RULE_STRING
			{
				$current.merge(this_STRING_5);
			}
			{
				newLeafNode(this_STRING_5, grammarAccess.getENTRYVALUE_LINEAccess().getSTRINGTerminalRuleCall_1_1());
			}
		)
		(
			(
				this_WS_6=RULE_WS
				{
					$current.merge(this_WS_6);
				}
				{
					newLeafNode(this_WS_6, grammarAccess.getENTRYVALUE_LINEAccess().getWSTerminalRuleCall_2_0_0());
				}
				    |
				this_SPECIAL_CHAR_7=RULE_SPECIAL_CHAR
				{
					$current.merge(this_SPECIAL_CHAR_7);
				}
				{
					newLeafNode(this_SPECIAL_CHAR_7, grammarAccess.getENTRYVALUE_LINEAccess().getSPECIAL_CHARTerminalRuleCall_2_0_1());
				}
			)*
			(
				this_ENTRYKEY_8=RULE_ENTRYKEY
				{
					$current.merge(this_ENTRYKEY_8);
				}
				{
					newLeafNode(this_ENTRYKEY_8, grammarAccess.getENTRYVALUE_LINEAccess().getENTRYKEYTerminalRuleCall_2_1_0());
				}
				    |
				this_STRING_9=RULE_STRING
				{
					$current.merge(this_STRING_9);
				}
				{
					newLeafNode(this_STRING_9, grammarAccess.getENTRYVALUE_LINEAccess().getSTRINGTerminalRuleCall_2_1_1());
				}
			)
		)*
		(
			(
				this_WS_10=RULE_WS
				{
					$current.merge(this_WS_10);
				}
				{
					newLeafNode(this_WS_10, grammarAccess.getENTRYVALUE_LINEAccess().getWSTerminalRuleCall_3_0());
				}
			)*
			(
				this_SPECIAL_CHAR_11=RULE_SPECIAL_CHAR
				{
					$current.merge(this_SPECIAL_CHAR_11);
				}
				{
					newLeafNode(this_SPECIAL_CHAR_11, grammarAccess.getENTRYVALUE_LINEAccess().getSPECIAL_CHARTerminalRuleCall_3_1());
				}
			)+
			(
				(
					this_WS_12=RULE_WS
					{
						$current.merge(this_WS_12);
					}
					{
						newLeafNode(this_WS_12, grammarAccess.getENTRYVALUE_LINEAccess().getWSTerminalRuleCall_3_2_0());
					}
				)+
				(
					this_SPECIAL_CHAR_13=RULE_SPECIAL_CHAR
					{
						$current.merge(this_SPECIAL_CHAR_13);
					}
					{
						newLeafNode(this_SPECIAL_CHAR_13, grammarAccess.getENTRYVALUE_LINEAccess().getSPECIAL_CHARTerminalRuleCall_3_2_1());
					}
				)+
			)*
		)?
	)
;

// Entry rule entryRuleEMPTY_LINE
entryRuleEMPTY_LINE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEMPTY_LINERule()); }
	iv_ruleEMPTY_LINE=ruleEMPTY_LINE
	{ $current=$iv_ruleEMPTY_LINE.current.getText(); }
	EOF;

// Rule EMPTY_LINE
ruleEMPTY_LINE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_LINE_START_0=RULE_LINE_START
	{
		$current.merge(this_LINE_START_0);
	}
	{
		newLeafNode(this_LINE_START_0, grammarAccess.getEMPTY_LINEAccess().getLINE_STARTTerminalRuleCall());
	}
;

RULE_ENTRYKEY : ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\'|'\r'|'\n')|~(('\\'|'"'|'\r'|'\n')))* '"';

RULE_LINE_START : '\r'? '\n' RULE_WS*;

RULE_SEPARATOR : '=';

RULE_SL_COMMENT : ('!'|'#') ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t');

RULE_SPECIAL_CHAR : ('#'..'+'|'-'..'/'|':'..'<'|'>'..'@'|'['..'^'|'{'..'~');

RULE_ANY_OTHER : .;
