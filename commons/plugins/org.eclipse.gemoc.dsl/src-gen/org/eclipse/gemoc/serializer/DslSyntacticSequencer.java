/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gemoc.services.DslGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Dsl_WSTerminalRuleCall_4_a;
	protected AbstractElementAlias match_Dsl_WSTerminalRuleCall_6_a;
	protected AbstractElementAlias match_Dsl___CarriageReturnKeyword_1_0_q_LineFeedKeyword_1_1__a;
	protected AbstractElementAlias match_Dsl___CarriageReturnKeyword_8_0_q_LineFeedKeyword_8_1__a;
	protected AbstractElementAlias match_Dsl_____EMPTY_LINEParserRuleCall_2_0_0_or_SL_COMMENTTerminalRuleCall_2_0_1_____CarriageReturnKeyword_2_1_0_q_LineFeedKeyword_2_1_1__a__a;
	protected AbstractElementAlias match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2_____CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__a__a;
	protected AbstractElementAlias match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2__q___CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__q__p;
	protected AbstractElementAlias match_EntryValue_WSTerminalRuleCall_2_0_a;
	protected AbstractElementAlias match_EntryValue_WSTerminalRuleCall_2_1_0_0_0_1_a;
	protected AbstractElementAlias match_EntryValue_WSTerminalRuleCall_2_1_1_1_a;
	protected AbstractElementAlias match_Entry_WSTerminalRuleCall_0_a;
	protected AbstractElementAlias match_Entry_WSTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Entry_WSTerminalRuleCall_4_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_Dsl_WSTerminalRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getDslAccess().getWSTerminalRuleCall_4());
		match_Dsl_WSTerminalRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getDslAccess().getWSTerminalRuleCall_6());
		match_Dsl___CarriageReturnKeyword_1_0_q_LineFeedKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getDslAccess().getCarriageReturnKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getLineFeedKeyword_1_1()));
		match_Dsl___CarriageReturnKeyword_8_0_q_LineFeedKeyword_8_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getDslAccess().getCarriageReturnKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getLineFeedKeyword_8_1()));
		match_Dsl_____EMPTY_LINEParserRuleCall_2_0_0_or_SL_COMMENTTerminalRuleCall_2_0_1_____CarriageReturnKeyword_2_1_0_q_LineFeedKeyword_2_1_1__a__a = new GroupAlias(true, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDslAccess().getEMPTY_LINEParserRuleCall_2_0_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getSL_COMMENTTerminalRuleCall_2_0_1())), new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getDslAccess().getCarriageReturnKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getLineFeedKeyword_2_1_1())));
		match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2_____CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__a__a = new GroupAlias(true, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDslAccess().getEMPTY_LINEParserRuleCall_9_0_1()), new TokenAlias(false, false, grammarAccess.getDslAccess().getSL_COMMENTTerminalRuleCall_9_0_2())), new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getDslAccess().getCarriageReturnKeyword_9_1_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getLineFeedKeyword_9_1_1())));
		match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2__q___CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__q__p = new GroupAlias(true, false, new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDslAccess().getEMPTY_LINEParserRuleCall_9_0_1()), new TokenAlias(false, false, grammarAccess.getDslAccess().getSL_COMMENTTerminalRuleCall_9_0_2())), new GroupAlias(false, true, new TokenAlias(false, true, grammarAccess.getDslAccess().getCarriageReturnKeyword_9_1_0()), new TokenAlias(false, false, grammarAccess.getDslAccess().getLineFeedKeyword_9_1_1())));
		match_EntryValue_WSTerminalRuleCall_2_0_a = new TokenAlias(true, true, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_0());
		match_EntryValue_WSTerminalRuleCall_2_1_0_0_0_1_a = new TokenAlias(true, true, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_1_0_0_0_1());
		match_EntryValue_WSTerminalRuleCall_2_1_1_1_a = new TokenAlias(true, true, grammarAccess.getEntryValueAccess().getWSTerminalRuleCall_2_1_1_1());
		match_Entry_WSTerminalRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getEntryAccess().getWSTerminalRuleCall_0());
		match_Entry_WSTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getEntryAccess().getWSTerminalRuleCall_2());
		match_Entry_WSTerminalRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getEntryAccess().getWSTerminalRuleCall_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEMPTY_LINERule())
			return getEMPTY_LINEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLINE_STARTRule())
			return getLINE_STARTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEPARATORRule())
			return getSEPARATORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSL_COMMENTRule())
			return getSL_COMMENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EMPTY_LINE:
	 * 	LINE_START 
	 * ;
	 */
	protected String getEMPTY_LINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * terminal LINE_START:
	 * 	'\r'? '\n' WS*
	 * ;
	 */
	protected String getLINE_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * terminal SEPARATOR:
	 * 	'=' 
	 * ;
	 */
	protected String getSEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal SL_COMMENT :
	 * 	('!' | '#') !('\n'|'\r')* 
	 * ;
	 */
	protected String getSL_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * terminal WS:
	 * 	' '|'\t'
	 * ;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Dsl_WSTerminalRuleCall_4_a.equals(syntax))
				emit_Dsl_WSTerminalRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl_WSTerminalRuleCall_6_a.equals(syntax))
				emit_Dsl_WSTerminalRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl___CarriageReturnKeyword_1_0_q_LineFeedKeyword_1_1__a.equals(syntax))
				emit_Dsl___CarriageReturnKeyword_1_0_q_LineFeedKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl___CarriageReturnKeyword_8_0_q_LineFeedKeyword_8_1__a.equals(syntax))
				emit_Dsl___CarriageReturnKeyword_8_0_q_LineFeedKeyword_8_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl_____EMPTY_LINEParserRuleCall_2_0_0_or_SL_COMMENTTerminalRuleCall_2_0_1_____CarriageReturnKeyword_2_1_0_q_LineFeedKeyword_2_1_1__a__a.equals(syntax))
				emit_Dsl_____EMPTY_LINEParserRuleCall_2_0_0_or_SL_COMMENTTerminalRuleCall_2_0_1_____CarriageReturnKeyword_2_1_0_q_LineFeedKeyword_2_1_1__a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2_____CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__a__a.equals(syntax))
				emit_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2_____CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2__q___CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__q__p.equals(syntax))
				emit_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2__q___CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EntryValue_WSTerminalRuleCall_2_0_a.equals(syntax))
				emit_EntryValue_WSTerminalRuleCall_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EntryValue_WSTerminalRuleCall_2_1_0_0_0_1_a.equals(syntax))
				emit_EntryValue_WSTerminalRuleCall_2_1_0_0_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EntryValue_WSTerminalRuleCall_2_1_1_1_a.equals(syntax))
				emit_EntryValue_WSTerminalRuleCall_2_1_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entry_WSTerminalRuleCall_0_a.equals(syntax))
				emit_Entry_WSTerminalRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entry_WSTerminalRuleCall_2_a.equals(syntax))
				emit_Entry_WSTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entry_WSTerminalRuleCall_4_a.equals(syntax))
				emit_Entry_WSTerminalRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         (ambiguity) 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=ENTRYKEY
	 *     )
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         (ambiguity) 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=STRING
	 *     )
	 */
	protected void emit_Dsl_WSTerminalRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         (ambiguity) 
	 *         name=ENTRYKEY
	 *     )
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         (ambiguity) 
	 *         name=STRING
	 *     )
	 */
	protected void emit_Dsl_WSTerminalRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '
	 '? 
	  *         '
	  *         '
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=ENTRYKEY
	 *     )
	 *     (
	 *         (rule start) 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=STRING
	 *     )
	 */
	protected void emit_Dsl___CarriageReturnKeyword_1_0_q_LineFeedKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '
	 '? 
	  *         '
	  *         '
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ENTRYKEY 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ENTRYKEY 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         entries+=Entry
	 *     )
	 *     (
	 *         name=STRING 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=STRING 
	 *         (ambiguity) 
	 *         (
	 *             (EMPTY_LINE | SL_COMMENT) 
	 *             (
	 *                 '
	 '? 
	 *                 '
	 *                 '
	 *             )*
	 *         )* 
	 *         entries+=Entry
	 *     )
	 */
	protected void emit_Dsl___CarriageReturnKeyword_8_0_q_LineFeedKeyword_8_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (EMPTY_LINE | SL_COMMENT) 
	  *         (
	  *             '
	 '? 
	  *             '
	  *             '
	  *         )*
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=ENTRYKEY
	 *     )
	 *     (
	 *         (rule start) 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         'name' 
	 *         WS* 
	 *         SEPARATOR 
	 *         WS* 
	 *         name=STRING
	 *     )
	 */
	protected void emit_Dsl_____EMPTY_LINEParserRuleCall_2_0_0_or_SL_COMMENTTerminalRuleCall_2_0_1_____CarriageReturnKeyword_2_1_0_q_LineFeedKeyword_2_1_1__a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (EMPTY_LINE | SL_COMMENT) 
	  *         (
	  *             '
	 '? 
	  *             '
	  *             '
	  *         )*
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         name=ENTRYKEY 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=ENTRYKEY 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         entries+=Entry
	 *     )
	 *     (
	 *         name=STRING 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=STRING 
	 *         (
	 *             '
	 '? 
	 *             '
	 *             '
	 *         )* 
	 *         (ambiguity) 
	 *         entries+=Entry
	 *     )
	 */
	protected void emit_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2_____CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (EMPTY_LINE | SL_COMMENT)? 
	  *         (
	  *             '
	 '? 
	  *             '
	  *             '
	  *         )?
	  *     )+
	 *
	 * This ambiguous syntax occurs at:
	 *     entries+=Entry (ambiguity) (rule end)
	 *     entries+=Entry (ambiguity) entries+=Entry
	 */
	protected void emit_Dsl_____EMPTY_LINEParserRuleCall_9_0_1_or_SL_COMMENTTerminalRuleCall_9_0_2__q___CarriageReturnKeyword_9_1_0_q_LineFeedKeyword_9_1_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     entryLines+=ENTRYVALUE_LINE (ambiguity) ',' WS* '\' LINE_START entryLines+=ENTRYVALUE_LINE
	 *     entryLines+=ENTRYVALUE_LINE (ambiguity) ',' WS* entryLines+=ENTRYVALUE_LINE
	 */
	protected void emit_EntryValue_WSTerminalRuleCall_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     entryLines+=ENTRYVALUE_LINE WS* ',' (ambiguity) '\' LINE_START entryLines+=ENTRYVALUE_LINE
	 */
	protected void emit_EntryValue_WSTerminalRuleCall_2_1_0_0_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     entryLines+=ENTRYVALUE_LINE WS* ',' (ambiguity) entryLines+=ENTRYVALUE_LINE
	 */
	protected void emit_EntryValue_WSTerminalRuleCall_2_1_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) key=ENTRYKEY
	 */
	protected void emit_Entry_WSTerminalRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     key=ENTRYKEY (ambiguity) SEPARATOR WS* value=EntryValue
	 */
	protected void emit_Entry_WSTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     key=ENTRYKEY WS* SEPARATOR (ambiguity) value=EntryValue
	 */
	protected void emit_Entry_WSTerminalRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
