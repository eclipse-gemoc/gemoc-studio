/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.gemoc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Dsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDSLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameQUALIFIEDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameDisplayNameParserRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final Assignment cMetaprogAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetaprogMetaprogParserRuleCall_4_0 = (RuleCall)cMetaprogAssignment_4.eContents().get(0);
		private final Assignment cAbstractSyntaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAbstractSyntaxAbstractSyntaxParserRuleCall_5_0 = (RuleCall)cAbstractSyntaxAssignment_5.eContents().get(0);
		private final Assignment cSemanticAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSemanticSemanticParserRuleCall_6_0 = (RuleCall)cSemanticAssignment_6.eContents().get(0);
		private final Assignment cValuesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValuesValueParserRuleCall_7_0 = (RuleCall)cValuesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Dsl:
		//	'DSL' name=(QUALIFIED | ID) '{'
		//	displayName=DisplayName?
		//	metaprog=Metaprog?
		//	abstractSyntax=AbstractSyntax?
		//	semantic=Semantic?
		//	values+=Value*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DSL' name=(QUALIFIED | ID) '{' displayName=DisplayName? metaprog=Metaprog? abstractSyntax=AbstractSyntax?
		//semantic=Semantic? values+=Value* '}'
		public Group getGroup() { return cGroup; }
		
		//'DSL'
		public Keyword getDSLKeyword_0() { return cDSLKeyword_0; }
		
		//name=(QUALIFIED | ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(QUALIFIED | ID)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//QUALIFIED
		public RuleCall getNameQUALIFIEDTerminalRuleCall_1_0_0() { return cNameQUALIFIEDTerminalRuleCall_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1() { return cNameIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//displayName=DisplayName?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }
		
		//DisplayName
		public RuleCall getDisplayNameDisplayNameParserRuleCall_3_0() { return cDisplayNameDisplayNameParserRuleCall_3_0; }
		
		//metaprog=Metaprog?
		public Assignment getMetaprogAssignment_4() { return cMetaprogAssignment_4; }
		
		//Metaprog
		public RuleCall getMetaprogMetaprogParserRuleCall_4_0() { return cMetaprogMetaprogParserRuleCall_4_0; }
		
		//abstractSyntax=AbstractSyntax?
		public Assignment getAbstractSyntaxAssignment_5() { return cAbstractSyntaxAssignment_5; }
		
		//AbstractSyntax
		public RuleCall getAbstractSyntaxAbstractSyntaxParserRuleCall_5_0() { return cAbstractSyntaxAbstractSyntaxParserRuleCall_5_0; }
		
		//semantic=Semantic?
		public Assignment getSemanticAssignment_6() { return cSemanticAssignment_6; }
		
		//Semantic
		public RuleCall getSemanticSemanticParserRuleCall_6_0() { return cSemanticSemanticParserRuleCall_6_0; }
		
		//values+=Value*
		public Assignment getValuesAssignment_7() { return cValuesAssignment_7; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_7_0() { return cValuesValueParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	SimpleValue | CompositeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleValue | CompositeValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleValue
		public RuleCall getSimpleValueParserRuleCall_0() { return cSimpleValueParserRuleCall_0; }
		
		//CompositeValue
		public RuleCall getCompositeValueParserRuleCall_1() { return cCompositeValueParserRuleCall_1; }
	}
	public class SimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SimpleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		
		//SimpleValue:
		//	name=ID '=' values+=STRING (',' values+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' values+=STRING (',' values+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0() { return cValuesSTRINGTerminalRuleCall_2_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_1_0() { return cValuesSTRINGTerminalRuleCall_3_1_0; }
	}
	public class CompositeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.CompositeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompositeValue:
		//	name=ID '{'
		//	values+=Value*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' values+=Value* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//values+=Value*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DisplayNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.DisplayName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisplayNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDisplayNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////-----------------------------------
		//DisplayName:
		//	{DisplayName}
		//	'displayName' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{DisplayName} 'displayName' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//{DisplayName}
		public Action getDisplayNameAction_0() { return cDisplayNameAction_0; }
		
		//'displayName'
		public Keyword getDisplayNameKeyword_1() { return cDisplayNameKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class MetaprogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Metaprog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetaprogAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetaprogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Metaprog:
		//	{Metaprog}
		//	'metaprog' '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Metaprog} 'metaprog' '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//{Metaprog}
		public Action getMetaprogAction_0() { return cMetaprogAction_0; }
		
		//'metaprog'
		public Keyword getMetaprogKeyword_1() { return cMetaprogKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}
	public class AbstractSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.AbstractSyntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbstractSyntaxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbstractSyntaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AbstractSyntax:
		//	{AbstractSyntax}
		//	'abstract-syntax' '{'
		//	values+=Value*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AbstractSyntax} 'abstract-syntax' '{' values+=Value* '}'
		public Group getGroup() { return cGroup; }
		
		//{AbstractSyntax}
		public Action getAbstractSyntaxAction_0() { return cAbstractSyntaxAction_0; }
		
		//'abstract-syntax'
		public Keyword getAbstractSyntaxKeyword_1() { return cAbstractSyntaxKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=Value*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SemanticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Semantic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemanticAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemanticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Semantic:
		//	{Semantic}
		//	'semantic' '{'
		//	values+=Value*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Semantic} 'semantic' '{' values+=Value* '}'
		public Group getGroup() { return cGroup; }
		
		//{Semantic}
		public Action getSemanticAction_0() { return cSemanticAction_0; }
		
		//'semantic'
		public Keyword getSemanticKeyword_1() { return cSemanticKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=Value*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final DslElements pDsl;
	private final ValueElements pValue;
	private final SimpleValueElements pSimpleValue;
	private final CompositeValueElements pCompositeValue;
	private final DisplayNameElements pDisplayName;
	private final MetaprogElements pMetaprog;
	private final AbstractSyntaxElements pAbstractSyntax;
	private final SemanticElements pSemantic;
	private final TerminalRule tQUALIFIED;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDsl = new DslElements();
		this.pValue = new ValueElements();
		this.pSimpleValue = new SimpleValueElements();
		this.pCompositeValue = new CompositeValueElements();
		this.pDisplayName = new DisplayNameElements();
		this.pMetaprog = new MetaprogElements();
		this.pAbstractSyntax = new AbstractSyntaxElements();
		this.pSemantic = new SemanticElements();
		this.tQUALIFIED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.QUALIFIED");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dsl:
	//	'DSL' name=(QUALIFIED | ID) '{'
	//	displayName=DisplayName?
	//	metaprog=Metaprog?
	//	abstractSyntax=AbstractSyntax?
	//	semantic=Semantic?
	//	values+=Value*
	//	'}';
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}
	
	//Value:
	//	SimpleValue | CompositeValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//SimpleValue:
	//	name=ID '=' values+=STRING (',' values+=STRING)*;
	public SimpleValueElements getSimpleValueAccess() {
		return pSimpleValue;
	}
	
	public ParserRule getSimpleValueRule() {
		return getSimpleValueAccess().getRule();
	}
	
	//CompositeValue:
	//	name=ID '{'
	//	values+=Value*
	//	'}';
	public CompositeValueElements getCompositeValueAccess() {
		return pCompositeValue;
	}
	
	public ParserRule getCompositeValueRule() {
		return getCompositeValueAccess().getRule();
	}
	
	////-----------------------------------
	//DisplayName:
	//	{DisplayName}
	//	'displayName' '=' value=STRING;
	public DisplayNameElements getDisplayNameAccess() {
		return pDisplayName;
	}
	
	public ParserRule getDisplayNameRule() {
		return getDisplayNameAccess().getRule();
	}
	
	//Metaprog:
	//	{Metaprog}
	//	'metaprog' '=' value=STRING;
	public MetaprogElements getMetaprogAccess() {
		return pMetaprog;
	}
	
	public ParserRule getMetaprogRule() {
		return getMetaprogAccess().getRule();
	}
	
	//AbstractSyntax:
	//	{AbstractSyntax}
	//	'abstract-syntax' '{'
	//	values+=Value*
	//	'}';
	public AbstractSyntaxElements getAbstractSyntaxAccess() {
		return pAbstractSyntax;
	}
	
	public ParserRule getAbstractSyntaxRule() {
		return getAbstractSyntaxAccess().getRule();
	}
	
	//Semantic:
	//	{Semantic}
	//	'semantic' '{'
	//	values+=Value*
	//	'}';
	public SemanticElements getSemanticAccess() {
		return pSemantic;
	}
	
	public ParserRule getSemanticRule() {
		return getSemanticAccess().getRule();
	}
	
	//terminal QUALIFIED:
	//	ID '.' ID ('.' ID)*;
	public TerminalRule getQUALIFIEDRule() {
		return tQUALIFIED;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
