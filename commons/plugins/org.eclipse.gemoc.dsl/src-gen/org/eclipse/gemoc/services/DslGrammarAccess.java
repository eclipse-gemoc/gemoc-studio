/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Dsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDslAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cEntriesEntryParserRuleCall_1_0_0_0 = (RuleCall)cEntriesAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEMPTY_LINEParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCarriageReturnKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLineFeedKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//Dsl:
		//	{Dsl} ((entries+=Entry |
		//	=> EMPTY_LINE | SL_COMMENT) ('\r'? '\n')*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Dsl} ((entries+=Entry | => EMPTY_LINE | SL_COMMENT) ('\r'? '\n')*)*
		public Group getGroup() { return cGroup; }
		
		//{Dsl}
		public Action getDslAction_0() { return cDslAction_0; }
		
		//((entries+=Entry | => EMPTY_LINE | SL_COMMENT) ('\r'? '\n')*)*
		public Group getGroup_1() { return cGroup_1; }
		
		//entries+=Entry | => EMPTY_LINE | SL_COMMENT
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//entries+=Entry
		public Assignment getEntriesAssignment_1_0_0() { return cEntriesAssignment_1_0_0; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_1_0_0_0() { return cEntriesEntryParserRuleCall_1_0_0_0; }
		
		//=> EMPTY_LINE
		public RuleCall getEMPTY_LINEParserRuleCall_1_0_1() { return cEMPTY_LINEParserRuleCall_1_0_1; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1_0_2() { return cSL_COMMENTTerminalRuleCall_1_0_2; }
		
		//('\r'? '\n')*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'\r'?
		public Keyword getCarriageReturnKeyword_1_1_0() { return cCarriageReturnKeyword_1_1_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_1_1_1() { return cLineFeedKeyword_1_1_1; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyENTRYKEYTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSEPARATORTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueEntryValueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//Entry:
		//	WS* key=ENTRYKEY WS* SEPARATOR WS* value=EntryValue;
		@Override public ParserRule getRule() { return rule; }
		
		//WS* key=ENTRYKEY WS* SEPARATOR WS* value=EntryValue
		public Group getGroup() { return cGroup; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }
		
		//key=ENTRYKEY
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//ENTRYKEY
		public RuleCall getKeyENTRYKEYTerminalRuleCall_1_0() { return cKeyENTRYKEYTerminalRuleCall_1_0; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_3() { return cSEPARATORTerminalRuleCall_3; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
		
		//value=EntryValue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//EntryValue
		public RuleCall getValueEntryValueParserRuleCall_5_0() { return cValueEntryValueParserRuleCall_5_0; }
	}
	public class EntryValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.EntryValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntryLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryLinesENTRYVALUE_LINEParserRuleCall_1_0 = (RuleCall)cEntryLinesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_0_0_0 = (Group)cGroup_2_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0_0_0 = (Keyword)cGroup_2_1_0_0_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1_0_0_0_1 = (RuleCall)cGroup_2_1_0_0_0.eContents().get(1);
		private final Keyword cBackslashKeyword_2_1_0_0_0_2 = (Keyword)cGroup_2_1_0_0_0.eContents().get(2);
		private final RuleCall cLINE_STARTTerminalRuleCall_2_1_0_0_0_3 = (RuleCall)cGroup_2_1_0_0_0.eContents().get(3);
		private final Assignment cEntryLinesAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_0_1_0 = (RuleCall)cEntryLinesAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cGroup_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_0_0 = (Group)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cBackslashKeyword_2_1_1_0_0_0 = (Keyword)cGroup_2_1_1_0_0.eContents().get(0);
		private final RuleCall cLINE_STARTTerminalRuleCall_2_1_1_0_0_1 = (RuleCall)cGroup_2_1_1_0_0.eContents().get(1);
		private final Assignment cEntryLinesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_1_1_0 = (RuleCall)cEntryLinesAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1_2_1 = (RuleCall)cGroup_2_1_2.eContents().get(1);
		private final Assignment cEntryLinesAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_2_2_0 = (RuleCall)cEntryLinesAssignment_2_1_2_2.eContents().get(0);
		
		//EntryValue:
		//	{EntryValue} entryLines+=ENTRYVALUE_LINE (WS* (=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE | => ('\\'
		//	LINE_START) entryLines+=ENTRYVALUE_LINE | ',' WS* entryLines+=ENTRYVALUE_LINE))*;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntryValue} entryLines+=ENTRYVALUE_LINE (WS* (=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE | => ('\\'
		//LINE_START) entryLines+=ENTRYVALUE_LINE | ',' WS* entryLines+=ENTRYVALUE_LINE))*
		public Group getGroup() { return cGroup; }
		
		//{EntryValue}
		public Action getEntryValueAction_0() { return cEntryValueAction_0; }
		
		//entryLines+=ENTRYVALUE_LINE
		public Assignment getEntryLinesAssignment_1() { return cEntryLinesAssignment_1; }
		
		//ENTRYVALUE_LINE
		public RuleCall getEntryLinesENTRYVALUE_LINEParserRuleCall_1_0() { return cEntryLinesENTRYVALUE_LINEParserRuleCall_1_0; }
		
		//(WS* (=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE | => ('\\' LINE_START) entryLines+=ENTRYVALUE_LINE | ','
		//WS* entryLines+=ENTRYVALUE_LINE))*
		public Group getGroup_2() { return cGroup_2; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_2_0() { return cWSTerminalRuleCall_2_0; }
		
		//=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE | => ('\\' LINE_START) entryLines+=ENTRYVALUE_LINE | ',' WS*
		//entryLines+=ENTRYVALUE_LINE
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//=> (',' WS* '\\' LINE_START)
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }
		
		//',' WS* '\\' LINE_START
		public Group getGroup_2_1_0_0_0() { return cGroup_2_1_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0_0_0() { return cCommaKeyword_2_1_0_0_0_0; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_2_1_0_0_0_1() { return cWSTerminalRuleCall_2_1_0_0_0_1; }
		
		//'\\'
		public Keyword getBackslashKeyword_2_1_0_0_0_2() { return cBackslashKeyword_2_1_0_0_0_2; }
		
		//LINE_START
		public RuleCall getLINE_STARTTerminalRuleCall_2_1_0_0_0_3() { return cLINE_STARTTerminalRuleCall_2_1_0_0_0_3; }
		
		//entryLines+=ENTRYVALUE_LINE
		public Assignment getEntryLinesAssignment_2_1_0_1() { return cEntryLinesAssignment_2_1_0_1; }
		
		//ENTRYVALUE_LINE
		public RuleCall getEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_0_1_0() { return cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_0_1_0; }
		
		//=> ('\\' LINE_START) entryLines+=ENTRYVALUE_LINE
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//=> ('\\' LINE_START)
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }
		
		//'\\' LINE_START
		public Group getGroup_2_1_1_0_0() { return cGroup_2_1_1_0_0; }
		
		//'\\'
		public Keyword getBackslashKeyword_2_1_1_0_0_0() { return cBackslashKeyword_2_1_1_0_0_0; }
		
		//LINE_START
		public RuleCall getLINE_STARTTerminalRuleCall_2_1_1_0_0_1() { return cLINE_STARTTerminalRuleCall_2_1_1_0_0_1; }
		
		//entryLines+=ENTRYVALUE_LINE
		public Assignment getEntryLinesAssignment_2_1_1_1() { return cEntryLinesAssignment_2_1_1_1; }
		
		//ENTRYVALUE_LINE
		public RuleCall getEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_1_1_0() { return cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_1_1_0; }
		
		//',' WS* entryLines+=ENTRYVALUE_LINE
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//WS*
		public RuleCall getWSTerminalRuleCall_2_1_2_1() { return cWSTerminalRuleCall_2_1_2_1; }
		
		//entryLines+=ENTRYVALUE_LINE
		public Assignment getEntryLinesAssignment_2_1_2_2() { return cEntryLinesAssignment_2_1_2_2; }
		
		//ENTRYVALUE_LINE
		public RuleCall getEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_2_2_0() { return cEntryLinesENTRYVALUE_LINEParserRuleCall_2_1_2_2_0; }
	}
	public class ENTRYVALUE_LINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.ENTRYVALUE_LINE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cENTRYKEYTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ENTRYVALUE_LINE:
		//	ENTRYKEY | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTRYKEY | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENTRYKEY
		public RuleCall getENTRYKEYTerminalRuleCall_0() { return cENTRYKEYTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class EMPTY_LINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.EMPTY_LINE");
		private final RuleCall cLINE_STARTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EMPTY_LINE:
		//	LINE_START;
		@Override public ParserRule getRule() { return rule; }
		
		//LINE_START
		public RuleCall getLINE_STARTTerminalRuleCall() { return cLINE_STARTTerminalRuleCall; }
	}
	
	
	private final DslElements pDsl;
	private final EntryElements pEntry;
	private final EntryValueElements pEntryValue;
	private final ENTRYVALUE_LINEElements pENTRYVALUE_LINE;
	private final EMPTY_LINEElements pEMPTY_LINE;
	private final TerminalRule tENTRYKEY;
	private final TerminalRule tSTRING;
	private final TerminalRule tLINE_START;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDsl = new DslElements();
		this.pEntry = new EntryElements();
		this.pEntryValue = new EntryValueElements();
		this.pENTRYVALUE_LINE = new ENTRYVALUE_LINEElements();
		this.pEMPTY_LINE = new EMPTY_LINEElements();
		this.tENTRYKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.ENTRYKEY");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.STRING");
		this.tLINE_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.LINE_START");
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SEPARATOR");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Dsl:
	//	{Dsl} ((entries+=Entry |
	//	=> EMPTY_LINE | SL_COMMENT) ('\r'? '\n')*)*;
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}
	
	//Entry:
	//	WS* key=ENTRYKEY WS* SEPARATOR WS* value=EntryValue;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//EntryValue:
	//	{EntryValue} entryLines+=ENTRYVALUE_LINE (WS* (=> (',' WS* '\\' LINE_START) entryLines+=ENTRYVALUE_LINE | => ('\\'
	//	LINE_START) entryLines+=ENTRYVALUE_LINE | ',' WS* entryLines+=ENTRYVALUE_LINE))*;
	public EntryValueElements getEntryValueAccess() {
		return pEntryValue;
	}
	
	public ParserRule getEntryValueRule() {
		return getEntryValueAccess().getRule();
	}
	
	//ENTRYVALUE_LINE:
	//	ENTRYKEY | STRING;
	public ENTRYVALUE_LINEElements getENTRYVALUE_LINEAccess() {
		return pENTRYVALUE_LINE;
	}
	
	public ParserRule getENTRYVALUE_LINERule() {
		return getENTRYVALUE_LINEAccess().getRule();
	}
	
	//EMPTY_LINE:
	//	LINE_START;
	public EMPTY_LINEElements getEMPTY_LINEAccess() {
		return pEMPTY_LINE;
	}
	
	public ParserRule getEMPTY_LINERule() {
		return getEMPTY_LINEAccess().getRule();
	}
	
	//terminal ENTRYKEY:
	//	('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9') ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')*;
	public TerminalRule getENTRYKEYRule() {
		return tENTRYKEY;
	}
	
	//terminal STRING: // '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"';
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\' | '\r' | '\n') | !('\\' | '"' | '\r' | '\n'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal LINE_START:
	//	'\r'? '\n' WS*;
	public TerminalRule getLINE_STARTRule() {
		return tLINE_START;
	}
	
	//terminal SEPARATOR:
	//	'=' | ':';
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal SL_COMMENT:
	//	('!' | '#') !('\n' | '\r')*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t';
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
